<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://markusthill.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://markusthill.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2024-05-04T00:05:25+00:00</updated><id>https://markusthill.github.io/feed.xml</id><title type="html">blank</title><subtitle>Personal notes and code snippets on math, ML &amp; programming. Based on [*folio](https://github.com/bogoli/-folio) design. </subtitle><entry><title type="html">Short Notes: Gradient of the Softmax Function for the Cross-Entropy Loss</title><link href="https://markusthill.github.io/blog/2024/gradient-softmax-function-with-cross-entropy/" rel="alternate" type="text/html" title="Short Notes: Gradient of the Softmax Function for the Cross-Entropy Loss"/><published>2024-05-03T17:29:40+00:00</published><updated>2024-05-03T17:29:40+00:00</updated><id>https://markusthill.github.io/blog/2024/gradient-softmax-function-with-cross-entropy</id><content type="html" xml:base="https://markusthill.github.io/blog/2024/gradient-softmax-function-with-cross-entropy/"><![CDATA[<p>In practice, the so-called softmax function is often used for the last layer of a neural network when several output units are required. Its purpose is to squash all outputs into the range of \([0,1]\) in a way that they sum up to one. This is particularly useful in classification tasks, where each output represents the probability of the input vector belonging to a specific class. When training the neural network weights using the classical backpropagation algorithm, it’s necessary to compute the gradient of the loss function. In the following, we demonstrate how to compute the gradient of a softmax function for the cross-entropy loss, assuming the softmax function is utilized in the output layer of the neural network.</p> <p>The softmax function for a unit \(z_j\) is defined as:</p> \[\begin{eqnarray*} o_j = \frac{\mbox{e}^{z_j}}{\sum_k \mbox{e}^{z_k}}, \end{eqnarray*}\] <p>where \(k\) iterates over all output units. The cross-entropy loss for a softmax unit with \(p\) output units \(o_j\) and targets \(y^*_j\) is defined as:</p> \[\begin{eqnarray*} E=-\sum_j^{p} y^*_j\cdot \mbox{log}(o_j). \end{eqnarray*}\] <p>In order to compute the gradient of \(E\) with respect to \(z_i\), we can start with:</p> \[\begin{align} \frac{\partial E}{\partial z_i}&amp;=- \sum_j^{p} y^*_j\cdot \frac{\partial}{\partial z_i}\mbox{log}(o_j) \nonumber \\ &amp;=- \sum_{j \neq i}^{p} y^*_j\cdot \frac{\partial}{\partial z_i}\mbox{log}(o_j) - y^*_i\cdot \frac{\partial}{\partial z_i}\mbox{log}(o_i). \label{eq:partialSoftmax} \end{align}\] <p>Now we compute both partial derivatives of \(o_j\) and \(o_i\), which lead to different results:</p> \[\begin{align} \frac{\partial}{\partial z_i} o_j &amp;= \frac{\partial}{\partial z_i} \frac{\mbox{e}^{z_j}}{\sum_k \mbox{e}^{z_k}}\nonumber \\ &amp;= \mbox{e}^{z_j} \frac{\partial}{\partial z_i} \Bigg(\sum_k \mbox{e}^{z_k} \Bigg)^{-1} \nonumber \\ &amp;= -\mbox{e}^{z_j} \Bigg(\sum_k \mbox{e}^{z_k} \Bigg)^{-2} \mbox{e}^{z_i} \nonumber \\ &amp;= -o_j \cdot o_i, \label{eq:partialOj} \end{align}\] <p>and</p> \[\begin{align} \frac{\partial}{\partial z_i} o_i &amp;= \frac{\partial}{\partial z_i} \frac{\mbox{e}^{z_i}}{\sum_k \mbox{e}^{z_k}} \nonumber \\ &amp;= \frac{\mbox{e}^{z_i}}{\sum_k \mbox{e}^{z_k}} + \mbox{e}^{z_i}\frac{\partial}{\partial z_i} \frac{1}{\sum_k \mbox{e}^{z_k}} \nonumber \\ &amp;= \frac{\mbox{e}^{z_i}}{\sum_k \mbox{e}^{z_k}} - \mbox{e}^{z_i} \Big(\sum_k \mbox{e}^{z_k}\Big)^{-2} \mbox{e}^{z_i} \nonumber \\ &amp;= o_i - o_i^2. \label{eq:partialOi} \end{align}\] <p>We can simplify Eq. \eqref{eq:partialSoftmax} with these two partial derivatives:</p> \[\begin{align} \frac{\partial E}{\partial z_i}&amp;=-\sum_{j \neq i}^{p} y^*_j\cdot \frac{\partial}{\partial z_i}\mbox{log}(o_j) - y^*_i\cdot \frac{\partial}{\partial z_i}\mbox{log}(o_i) \nonumber \\ &amp;= -\sum_{j \neq i}^{p} y^*_j \frac{1}{o_j} \frac{\partial}{\partial z_i}o_j - y^*_i \frac{1}{o_i} \frac{\partial}{\partial z_i}o_i. \label{eq:partialSoftmax2} \end{align}\] <p>Finally, we insert \eqref{eq:partialOj} and \eqref{eq:partialOi} into \eqref{eq:partialSoftmax2}:</p> \[\begin{align*} \frac{\partial E}{\partial z_i} &amp;= \sum_{j \neq i}^{p} y^*_j \frac{1}{o_j} o_j \cdot o_i - y^*_i \frac{1}{o_i} (o_i - o_i^2)\\ &amp;= \sum_{j \neq i}^{p} y^*_j o_i - y^*_i (1 - o_i)\\ &amp;= o_i\sum_{j \neq i}^{p} y^*_j - y^*_i + y^*_i o_i \\ &amp;= o_i \underbrace{\sum_{j =1}^{p} y^*_j }_{=1} - y^*_i \\ &amp;= o_i - y^*_i. \end{align*}\]]]></content><author><name></name></author><category term="stats"/><category term="ML"/><category term="math"/><category term="softmax"/><category term="cross-entropy"/><category term="gradient"/><category term="backprop"/><summary type="html"><![CDATA[The softmax function in neural networks ensures outputs sum to one and are within [0,1]. Here's how to compute its gradients when the cross-entropy loss is applied.]]></summary></entry><entry><title type="html">Obfuscating a Function – How not to write Code</title><link href="https://markusthill.github.io/blog/2024/obsfucated-c-code/" rel="alternate" type="text/html" title="Obfuscating a Function – How not to write Code"/><published>2024-05-02T13:01:50+00:00</published><updated>2024-05-02T13:01:50+00:00</updated><id>https://markusthill.github.io/blog/2024/obsfucated-c-code</id><content type="html" xml:base="https://markusthill.github.io/blog/2024/obsfucated-c-code/"><![CDATA[<p>Some time ago, I had to write a pretty simple function that converts an integer value into a new “format.” The function ended up being easy-to-read code. For reasons I do not remember, I decided to obfuscate the purpose of the function slightly, and I ended up with the following:</p> <figure class="highlight"><pre><code class="language-c" data-lang="c"><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span>
<span class="kt">char</span><span class="o">*</span> <span class="nf">whatDoIdo</span><span class="p">(</span><span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">x</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">t</span><span class="p">)</span> <span class="p">{</span>
    <span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">7</span><span class="p">,</span><span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="n">v</span><span class="o">=</span><span class="mi">5000</span><span class="p">,</span><span class="n">p</span><span class="p">,</span><span class="n">z</span><span class="p">[</span><span class="mi">7</span><span class="p">]</span><span class="o">=</span><span class="p">{</span><span class="mh">0x49</span><span class="p">,</span><span class="mh">0x56</span><span class="p">,</span><span class="mh">0x58</span><span class="p">,</span><span class="mh">0x4c</span><span class="p">,</span><span class="mh">0x43</span><span class="p">,</span><span class="mh">0x44</span><span class="p">,</span><span class="mh">0x4d</span><span class="p">};</span>
    <span class="k">while</span><span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="n">t</span><span class="p">[</span><span class="n">j</span><span class="p">]</span><span class="o">=</span><span class="sc">'\0'</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="n">x</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="n">v</span><span class="o">/=</span><span class="mi">5</span><span class="o">/</span><span class="p">((</span><span class="n">i</span><span class="o">--+</span><span class="mi">1</span><span class="p">)</span><span class="o">%</span><span class="mi">2</span><span class="o">+</span><span class="mi">1</span><span class="p">))</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">while</span><span class="p">(</span><span class="n">x</span><span class="o">&gt;=</span><span class="n">v</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="n">x</span><span class="o">-=</span><span class="n">v</span><span class="p">)</span><span class="o">+</span><span class="mi">1</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="n">t</span><span class="p">[</span><span class="n">j</span><span class="o">++</span><span class="p">]</span><span class="o">=</span><span class="n">z</span><span class="p">[</span><span class="n">i</span><span class="p">])</span><span class="o">+</span><span class="mi">1</span><span class="p">);</span>
        <span class="k">while</span><span class="p">(</span><span class="n">i</span><span class="o">&amp;&amp;</span><span class="n">x</span><span class="o">&gt;=</span><span class="p">(</span><span class="n">p</span><span class="o">=</span><span class="n">v</span><span class="o">-</span><span class="n">v</span><span class="o">*</span><span class="p">(</span><span class="n">i</span><span class="o">%</span><span class="mi">2</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">/</span><span class="mi">10</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="n">x</span><span class="o">-=</span><span class="n">p</span><span class="p">)</span><span class="o">+</span><span class="mi">1</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="n">t</span><span class="p">[</span><span class="n">j</span><span class="o">++</span><span class="p">]</span><span class="o">=</span><span class="n">z</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">2</span><span class="o">+</span><span class="p">(</span><span class="n">i</span><span class="o">%</span><span class="mi">2</span><span class="p">)])</span><span class="o">+</span><span class="mi">1</span>
          <span class="o">&amp;&amp;</span><span class="p">(</span><span class="n">t</span><span class="p">[</span><span class="n">j</span><span class="o">++</span><span class="p">]</span><span class="o">=</span><span class="n">z</span><span class="p">[</span><span class="n">i</span><span class="p">])</span><span class="o">+</span><span class="mi">1</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="n">t</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">123</span><span class="p">;</span>
    <span class="kt">char</span> <span class="n">t</span><span class="p">[</span><span class="mi">200</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="mi">0</span><span class="p">};</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">"%d : %s"</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">whatDoIdo</span><span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="n">t</span><span class="p">));</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span></code></pre></figure> <p>If you run the code for different values of <code class="language-plaintext highlighter-rouge">x</code> in the function <code class="language-plaintext highlighter-rouge">main(),</code> you will quickly discover the function’s purpose, <code class="language-plaintext highlighter-rouge">whatDoIdo().</code> If you are more dedicated, you can decrypt the code and guess its functionality without running it once. Indeed, you should prevent writing code like this at work or university since your colleagues/classmates or others who have to read your code most likely won’t appreciate this kind of programming style.</p> <p>If you do not have a compiler at hand, you can take a look at some sample outputs that should appear familiar.</p> <details><summary>Click here to see some examples</summary> <figure class="highlight"><pre><code class="language-plaintext" data-lang="plaintext">  1  : I
  5  : V
  50 : L
  </code></pre></figure> </details> <p><br/></p> <p>Any guess? If not, then take a look at some more outputs:</p> <details><summary>Click here to see more examples</summary> <figure class="highlight"><pre><code class="language-plaintext" data-lang="plaintext">  87   : LXXXVII
  123  : CXXIII
  1846 : MDCCCXLVI
  </code></pre></figure> </details> <p><br/></p> <p>There is even an <a href="https://www.ioccc.org/">annual contest for obfuscated C code</a> on <a href="https://www.ioccc.org/">https://www.ioccc.org/</a>. IIf you are interested in submitting an entry for the next contest, the degree of obfuscation should be significantly higher than in this trivial example. The winning entries of the past years are really worth looking at.</p>]]></content><author><name></name></author><category term="Programming"/><summary type="html"><![CDATA[A while back, I created a straightforward function to convert an integer into a new format, resulting in clear code. However, I inexplicably chose to obscure its purpose, leading to the following outcome: Read more in this post...]]></summary></entry><entry><title type="html">Short Notes: Eigendecomposition of a Matrix</title><link href="https://markusthill.github.io/blog/2024/eigendecomposition/" rel="alternate" type="text/html" title="Short Notes: Eigendecomposition of a Matrix"/><published>2024-05-01T09:16:00+00:00</published><updated>2024-05-01T09:16:00+00:00</updated><id>https://markusthill.github.io/blog/2024/eigendecomposition</id><content type="html" xml:base="https://markusthill.github.io/blog/2024/eigendecomposition/"><![CDATA[<p>A vector \(\mathbf{v}_i \in \mathbb{C}^{n}\) is called the \(i\)-th eigenvector of a matrix \(\mathbf{A} \in \mathbb{R}^{n \times n}\), if it satisfies the simple equation</p> \[\begin{align} \mathbf{A} \mathbf{v}_i = \lambda_i \mathbf{v}_i, \label{eq:eigvalues} \end{align}\] <p>for a scalar value \(\lambda_i \in \mathbb{C}\), called an eigenvalue. (Assuming the matrix \(\mathbf{A}\) is real-valued, the eigenvalues and eigenvectors might still be complex.) Let us further assume that the \(n\) eigenvectors of matrix \(\mathbf{A}\) are linearly independent.</p> <p>We can now ‘horizontally’ stack the eigenvectors into a matrix \(\mathbf{Q} \in \mathbb{C}^{n \times n}\):</p> \[\begin{align} \mathbf{Q} = \big[\mathbf{v}_1, \mathbf{v}_2, \ldots, \mathbf{v}_n \big]. \label{eq:Q} \end{align}\] <p>Multiplying \(\mathbf{A}\) with \(\mathbf{Q}\) gives us:</p> \[\begin{align} \mathbf{A}\mathbf{Q} = \big[\mathbf{A}\mathbf{v}_1, \mathbf{A}\mathbf{v}_2, \ldots, \mathbf{A}\mathbf{v}_n \big]. \label{eq:AQ} \end{align}\] <p>If we compare Eq. \eqref{eq:AQ} with Eq. \eqref{eq:eigvalues}, we can see that:</p> \[\begin{align} \mathbf{A}\mathbf{Q} = \big[\lambda_1\mathbf{v}_1, \lambda_2\mathbf{v}_2, \ldots, \lambda_n\mathbf{v}_n \big]. \label{eq:AQ_2} \end{align}\] <p>If we now define a diagonal matrix carrying the eigenvalues \(\lambda_i\) as</p> \[\begin{align} \mathbf{\Lambda} = \begin{bmatrix} \lambda_1 &amp; 0 &amp; \ldots &amp; 0\\ 0 &amp; \lambda_2 &amp; \ldots &amp; 0 \\ \vdots &amp; \vdots &amp; \ddots &amp; \vdots \\ 0 &amp; 0 &amp; \ldots &amp; \lambda_n \end{bmatrix}, \label{eq:Lambda} \end{align}\] <p>we see that</p> \[\begin{align} \mathbf{Q}\mathbf{\Lambda} = \big[\lambda_1\mathbf{v}_1, \lambda_2\mathbf{v}_2, \ldots, \lambda_n\mathbf{v}_n \big] \label{eq:AQ_3} \end{align}\] <p>which is equal to Eq. \eqref{eq:AQ_2}:</p> \[\begin{align} \mathbf{Q}\mathbf{\Lambda} = \mathbf{A}\mathbf{Q}. \label{eq:AQ_4} \end{align}\] <p>One final rearrangement – post-multiplying Eq. \eqref{eq:AQ_4} with \(\mathbf{Q}^{-1}\) – and we are done:</p> \[\begin{align} \mathbf{A} = \mathbf{Q}\mathbf{\Lambda}\mathbf{Q}^{-1}. \label{eq:eigendecomposition} \end{align}\] <p>Eq. \eqref{eq:eigendecomposition} is also called eigendecomposition of matrix \(\mathbf{A}\).</p> <style>.jupyter-child-ext{width:112%;position:relative;left:calc(-10%)}</style> <div class="jupyter-child-ext"> <div class="jupyter-notebook" style="position: relative; width: 100%; margin: 0 auto;"> <div class="jupyter-notebook-iframe-container"> <iframe src="/assets/jupyter/MarkusThill.github.io-jupyter/2024_05_01_eigendecomposition_example.ipynb.html" style="position: absolute; top: 0; left: 0; border-style: none;" width="100%" height="100%" onload="this.parentElement.style.paddingBottom = (this.contentWindow.document.documentElement.scrollHeight + 10) + 'px'"></iframe> </div> </div> </div>]]></content><author><name></name></author><category term="math"/><category term="code"/><category term="eigendecomposition"/><category term="python"/><summary type="html"><![CDATA[The derivation of the eigendecomposition is surprisingly simple. Read more here!]]></summary></entry><entry><title type="html">Surprising Bank Investment</title><link href="https://markusthill.github.io/blog/2024/surprising-investment/" rel="alternate" type="text/html" title="Surprising Bank Investment"/><published>2024-04-29T14:36:06+00:00</published><updated>2024-04-29T14:36:06+00:00</updated><id>https://markusthill.github.io/blog/2024/surprising-investment</id><content type="html" xml:base="https://markusthill.github.io/blog/2024/surprising-investment/"><![CDATA[<p>Your bank has proposed an investment opportunity in a new startup. If successful, you will get to keep all the profits after one year. They sweetened the deal by contributing a smaller portion, which they’ll take back after a year, but any profit on their share is yours. Excited about this, you’ve decided to invest a substantial amount: $1,000,000 in total, with 99% from you and 1% from the bank. However, a year later, you receive a letter saying the startup went bankrupt, resulting in some losses. The bank reassures you that you still own 98% of the remaining money, and they’ll take back their initial investment, leaving you with the rest. Should you be worried?</p> <p>Let’s delve into the numbers. At first glance, it might not seem like a significant loss since the bank’s investment was only 1%. However, upon closer examination, the bank’s initial investment was $10,000 (1% of $1,000,000). Per the agreement, they’ll get this back regardless of the startup’s failure. With you owning 98% of the remaining funds, the other 2% ($10,000) belongs to the bank. So, if 2% equals $10,000, 98% corresponds to $490,000. In equation form, if \(x\) represents the remaining money after the investment, we can express it as:</p> \[\begin{align*} x &amp;= $10\,000 + 0.98x \\ 0.02x &amp;= $10\,000 \\ x &amp;= \frac{$10\,000}{0.02} = 500\,000 $ \\ 0.98x &amp;= 0.98 \cdot $500\,000 = $490\,000 \end{align*}\] <p>Considering you invested 99% of $1,000,000, which equals $990,000, you’ve actually lost $500,000. That’s over 50% of your original investment. So, it’s understandable if you’re not exactly amused by the outcome.</p>]]></content><author><name></name></author><category term="math"/><summary type="html"><![CDATA[Discover how investing in a startup turned into a financial rollercoaster. Your bank offers you a chance to invest in a new venture, with the promise of keeping all the profits if successful. Excited, you dive in with $1,000,000, providing 99% of the investment while the bank chips in the remaining 1%.]]></summary></entry><entry><title type="html">Solving Peg Solitaire with efficient Bit-Board Representations</title><link href="https://markusthill.github.io/blog/2024/solving-peg-solitaire/" rel="alternate" type="text/html" title="Solving Peg Solitaire with efficient Bit-Board Representations"/><published>2024-04-26T19:20:00+00:00</published><updated>2024-04-26T19:20:00+00:00</updated><id>https://markusthill.github.io/blog/2024/solving-peg-solitaire</id><content type="html" xml:base="https://markusthill.github.io/blog/2024/solving-peg-solitaire/"><![CDATA[<p>Many of us know the board game peg solitaire and might even have one of its many variants at home. Peg solitaire is a one-player game played on a board with \(n\) holes and \(n-1\) pegs. The number of holes depends on the board variant. For example, the English variant consists of 33 holes, while the typical diamond variant consists of 41. The rules of the game are relatively straightforward. In each move, the player selects one peg and jumps – vertically or horizontally, not diagonally – with this peg over a directly neighboring one into an empty hole. The neighboring peg is then removed, leaving an empty hole. So, in each move, one peg jumps two holes further, and the peg in between is removed. Once no move is possible any longer, the game is over. This is the case when no pair of orthogonally adjacent pegs or if only one peg is left. In the latter case, the game is won. As shown below, the English variant has one additional rule: To win, more is needed than only one peg being left in the end; this peg must also be located in the center of the board. The English variant is shown in the figure below.</p> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire/solitaire1-480.webp 480w,/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire/solitaire1-800.webp 800w,/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire/solitaire1-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire/solitaire1.png" class="img-fluid rounded z-depth-1 imgcenter" width="70%" height="auto" data-zoomable="" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> <figcaption class="caption"> <b>Figure 1:</b> English Peg Solitaire. </figcaption> </figure> <p>Even though the game’s rules are pretty simple, finding a solution is not trivial. Many players need several attempts to find the solution for the English peg solitaire. The solution for the diamond-shaped board is even more tricky.</p> <h2 id="solution-for-the-english-peg-solitaire">Solution for the English Peg Solitaire</h2> <p>When I embarked on my programming journey a few years back, English peg solitaire was among my first projects. Frustrated by my inability to solve the game, I decided to take matters into my own hands and write a solver. The code, which you can find at the end of this post, may not be the most elegant or efficient, but it manages to find a solution in under a second. I attribute this success to a stroke of luck with the standard move ordering I used. Interestingly, a slight change in the move ordering significantly increases the solver’s runtime to several hours.</p> <p>The solver gave me the following solution:</p> <div style="width: 70%" class="imgcenter"> <swiper-container keyboard="true" navigation="true" pagination="true" pagination-clickable="true" pagination-dynamic-bullets="true" rewind="true"> <swiper-slide> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire/Folie01-480.webp 480w,/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire/Folie01-800.webp 800w,/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire/Folie01-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire/Folie01.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </swiper-slide> <swiper-slide> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire/Folie02-480.webp 480w,/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire/Folie02-800.webp 800w,/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire/Folie02-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire/Folie02.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </swiper-slide> <swiper-slide> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire/Folie03-480.webp 480w,/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire/Folie03-800.webp 800w,/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire/Folie03-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire/Folie03.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </swiper-slide> <swiper-slide> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire/Folie04-480.webp 480w,/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire/Folie04-800.webp 800w,/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire/Folie04-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire/Folie04.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </swiper-slide> <swiper-slide> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire/Folie05-480.webp 480w,/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire/Folie05-800.webp 800w,/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire/Folie05-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire/Folie05.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </swiper-slide> <swiper-slide> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire/Folie06-480.webp 480w,/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire/Folie06-800.webp 800w,/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire/Folie06-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire/Folie06.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </swiper-slide> <swiper-slide> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire/Folie07-480.webp 480w,/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire/Folie07-800.webp 800w,/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire/Folie07-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire/Folie07.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </swiper-slide> <swiper-slide> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire/Folie08-480.webp 480w,/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire/Folie08-800.webp 800w,/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire/Folie08-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire/Folie08.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </swiper-slide> <swiper-slide> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire/Folie09-480.webp 480w,/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire/Folie09-800.webp 800w,/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire/Folie09-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire/Folie09.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </swiper-slide> <swiper-slide> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire/Folie10-480.webp 480w,/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire/Folie10-800.webp 800w,/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire/Folie10-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire/Folie10.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </swiper-slide> <swiper-slide> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire/Folie11-480.webp 480w,/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire/Folie11-800.webp 800w,/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire/Folie11-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire/Folie11.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </swiper-slide> <swiper-slide> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire/Folie12-480.webp 480w,/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire/Folie12-800.webp 800w,/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire/Folie12-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire/Folie12.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </swiper-slide> <swiper-slide> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire/Folie13-480.webp 480w,/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire/Folie13-800.webp 800w,/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire/Folie13-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire/Folie13.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </swiper-slide> <swiper-slide> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire/Folie14-480.webp 480w,/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire/Folie14-800.webp 800w,/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire/Folie14-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire/Folie14.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </swiper-slide> <swiper-slide> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire/Folie15-480.webp 480w,/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire/Folie15-800.webp 800w,/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire/Folie15-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire/Folie15.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </swiper-slide> <swiper-slide> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire/Folie16-480.webp 480w,/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire/Folie16-800.webp 800w,/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire/Folie16-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire/Folie16.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </swiper-slide> <swiper-slide> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire/Folie17-480.webp 480w,/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire/Folie17-800.webp 800w,/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire/Folie17-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire/Folie17.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </swiper-slide> <swiper-slide> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire/Folie18-480.webp 480w,/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire/Folie18-800.webp 800w,/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire/Folie18-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire/Folie18.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </swiper-slide> <swiper-slide> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire/Folie19-480.webp 480w,/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire/Folie19-800.webp 800w,/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire/Folie19-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire/Folie19.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </swiper-slide> <swiper-slide> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire/Folie20-480.webp 480w,/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire/Folie20-800.webp 800w,/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire/Folie20-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire/Folie20.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </swiper-slide> <swiper-slide> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire/Folie21-480.webp 480w,/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire/Folie21-800.webp 800w,/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire/Folie21-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire/Folie21.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </swiper-slide> <swiper-slide> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire/Folie22-480.webp 480w,/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire/Folie22-800.webp 800w,/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire/Folie22-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire/Folie22.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </swiper-slide> <swiper-slide> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire/Folie23-480.webp 480w,/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire/Folie23-800.webp 800w,/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire/Folie23-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire/Folie23.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </swiper-slide> <swiper-slide> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire/Folie24-480.webp 480w,/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire/Folie24-800.webp 800w,/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire/Folie24-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire/Folie24.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </swiper-slide> <swiper-slide> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire/Folie25-480.webp 480w,/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire/Folie25-800.webp 800w,/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire/Folie25-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire/Folie25.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </swiper-slide> <swiper-slide> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire/Folie26-480.webp 480w,/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire/Folie26-800.webp 800w,/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire/Folie26-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire/Folie26.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </swiper-slide> <swiper-slide> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire/Folie27-480.webp 480w,/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire/Folie27-800.webp 800w,/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire/Folie27-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire/Folie27.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </swiper-slide> <swiper-slide> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire/Folie28-480.webp 480w,/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire/Folie28-800.webp 800w,/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire/Folie28-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire/Folie28.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </swiper-slide> <swiper-slide> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire/Folie29-480.webp 480w,/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire/Folie29-800.webp 800w,/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire/Folie29-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire/Folie29.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </swiper-slide> <swiper-slide> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire/Folie30-480.webp 480w,/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire/Folie30-800.webp 800w,/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire/Folie30-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire/Folie30.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </swiper-slide> <swiper-slide> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire/Folie31-480.webp 480w,/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire/Folie31-800.webp 800w,/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire/Folie31-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire/Folie31.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </swiper-slide> <swiper-slide> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire/Folie32-480.webp 480w,/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire/Folie32-800.webp 800w,/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire/Folie32-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire/Folie32.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </swiper-slide> </swiper-container> </div> <p>Recently, I again stumbled across peg solitaire when I saw a different board with the shape of a diamond. This stirred my interest in the game again, and I spent several hours writing a solver using bit boards and some other enhancements for this board, as described in the following section.</p> <h2 id="efficiently-solving-the-diamond-41-board">Efficiently Solving the Diamond-41 Board</h2> <p>As the name suggests, the Diamond-41 board consists of 41 holes. As I was told – in contrast to the English variant – the only initial empty hole is not located in the center of the board but has to be placed at a slightly different position to be able to solve the game (as I found later, the solver was not able to solve the game for an initially empty hole in the center of the board). The initial position is as follows:</p> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire2/Folie01-480.webp 480w,/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire2/Folie01-800.webp 800w,/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire2/Folie01-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire2/Folie01.png" class="img-fluid rounded z-depth-1 imgcenter" width="70%" height="auto" data-zoomable="" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> <figcaption class="caption"> <b>Figure 2:</b> Diamond-41 Peg Solitaire. </figcaption> </figure> <p>In the beginning, only two moves are possible. Since there are many corners on this board, it isn’t easy to find a solution where only one peg is left over at the end. Also, for backtracking algorithms, the computational effort is enormous to solve this problem. Without advanced approaches, an algorithm could run for many days until a solution is found.</p> <h4 id="bit-boards">Bit-Boards</h4> <p>One significant improvement of a classical algorithm can be achieved when, instead of arrays, so-called bit-boards are used to represent a position. Using bit-boards is especially easy for peg solitaire since each hole can either be empty (binary 0) or filled with a peg (binary 1). In this way, only 41 bits are required to encode any board position. Hence, a 64-bit variable is sufficient. There are also enough bits left over which can be used to encode the board’s boundary. As we will see later, this is important for checking if a move is within the allowed limits. Bit boards have the advantage that the whole board can be processed at once with bitwise operations. Suppose the encoding of each hole is done suitably. In that case, many operations (such as generating valid moves for each position, mirroring the board along a particular axis, counting pegs, etc.) can be executed with minimum CPU cycles. Additionally, the representation is memory efficient, so positions can be easily stored in a hash table or other data structures.</p> <p>I designed the following layout for the bit-board representation of the Diamond-41 variant of peg solitaire.</p> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire2/0bitboard-480.webp 480w,/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire2/0bitboard-800.webp 800w,/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire2/0bitboard-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire2/0bitboard.png" class="img-fluid rounded z-depth-1 imgcenter" width="70%" height="auto" data-zoomable="" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> <figcaption class="caption"> <b>Figure 3:</b> Representation of the Diamond-41 Peg Solitaire with a Bitboard. </figcaption> </figure> <p>Each number represents the corresponding bit in the bit-board. The center hole is placed at bit 0. The squares in the above diagram show the boundary of the board. Moves are not allowed to end up in any of these bits. Note that many boundary bit-numbers appear twice in the diagram. This is due to the unique layout, which I will explain in the following. However, having a separate bit for every point on the boundary is unnecessary since it is only used to check if a move leaves the board.</p> <p>The advantage of this arrangement is that all pegs can be easily moved vertically or horizontally. For example, a bitwise left rotation of the board would move all pegs vertically by one. Accordingly, pegs are moved down by a rotation of one to the right (or left rotation of -1) and moved horizontally by bitwise rotations of the bit-board by 10 and -10. As we will see, this is especially helpful when we want to find all possible moves. This move generation can be done in very few CPU cycles, even for complex board situations. Furthermore, mirroring the board along the vertical and horizontal axes can also be done comparably fast. The only tradeoff is that rotations of a position can only be computed with some extra effort. One solution for this problem could be consistently maintaining two bitboards: one for the original position and one for a rotated position (by 90 degrees). All other symmetric positions (8 overall) could be constructed with vertical/horizontal flips.</p> <p>For example, the remaining number of pegs can be computed with an efficient function that counts the number of set bits in a bit field. Since we are usually interested in counting the remaining pegs after no move is possible anymore, there are typically not too many pegs left, and the following function computes the number very fast:</p> <figure class="highlight"><pre><code class="language-c" data-lang="c"><span class="kt">int</span> <span class="nf">bitCount</span><span class="p">(</span><span class="kt">uint64_t</span> <span class="n">x</span><span class="p">)</span> <span class="p">{</span>
    <span class="kt">int</span> <span class="n">c</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="k">while</span> <span class="p">(</span><span class="n">x</span> <span class="o">!=</span> <span class="n">ZERO</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">x</span> <span class="o">&amp;=</span> <span class="p">(</span><span class="n">x</span> <span class="o">-</span> <span class="n">UINT64_C</span><span class="p">(</span><span class="mi">1</span><span class="p">));</span>
        <span class="n">c</span><span class="o">++</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="n">c</span><span class="p">;</span>
<span class="p">}</span></code></pre></figure> <p>If only three bits are set in a bit-field, above function would only require 3 iterations in order to count the set bits.</p> <h4 id="move-generation">Move Generation</h4> <p>The method to compute all the possible moves for a given board position <code class="language-plaintext highlighter-rouge">b</code> is even more critical. All possible moves in one direction (in total four directions) can simply be computed with:</p> <figure class="highlight"><pre><code class="language-c" data-lang="c"><span class="kt">uint64_t</span> <span class="n">mv</span> <span class="o">=</span> <span class="n">rol</span><span class="p">(</span><span class="n">rol</span><span class="p">(</span><span class="n">b</span><span class="p">,</span> <span class="n">dir</span><span class="p">)</span> <span class="o">&amp;</span> <span class="n">BOARD</span> <span class="o">&amp;</span> <span class="n">b</span><span class="p">,</span> <span class="n">dir</span><span class="p">)</span> <span class="o">&amp;</span> <span class="n">BOARD</span> <span class="o">&amp;</span> <span class="p">(</span><span class="o">~</span><span class="n">b</span><span class="p">);</span></code></pre></figure> <p>where <code class="language-plaintext highlighter-rouge">b</code> is an arbitrary board position, <code class="language-plaintext highlighter-rouge">rol</code> is a bitwise rotation left (implemented with some inline assembler), <code class="language-plaintext highlighter-rouge">dir</code> is the specified direction (+1 for up, -1 for down, +10 for right, -10 for left) and <code class="language-plaintext highlighter-rouge">BOARD</code> is a bit-mask which masks all 41 holes of the board. The variable <code class="language-plaintext highlighter-rouge">mv</code> contains all the target holes for the allowed moves in the specified direction. After all the possible moves (in <code class="language-plaintext highlighter-rouge">mv</code>) for a direction <code class="language-plaintext highlighter-rouge">dir</code> are known, each move can be performed with a few bitwise operations. We can extract the next move, which should be performed with:</p> <figure class="highlight"><pre><code class="language-c" data-lang="c"><span class="c1">// Get next move from all possibilities mv</span>
<span class="kt">uint64_t</span> <span class="n">x</span> <span class="o">=</span> <span class="p">((</span><span class="n">mv</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">^</span> <span class="n">mv</span><span class="p">)</span> <span class="o">&amp;</span> <span class="n">mv</span><span class="p">;</span></code></pre></figure> <p>To perform the move, we have to set a peg to the target position, we have to remove the “jumped-over” peg, and then remove the peg from the old position:</p> <figure class="highlight"><pre><code class="language-c" data-lang="c"><span class="c1">// perform move</span>
<span class="n">b</span> <span class="o">|=</span> <span class="n">x</span><span class="p">;</span> <span class="c1">// set peg at new position</span>
<span class="n">b</span> <span class="o">&amp;=</span> <span class="o">~</span><span class="n">rol</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="o">-</span><span class="n">dir</span><span class="p">);</span> <span class="c1">// remove jumped-over peg</span>
<span class="n">b</span> <span class="o">&amp;=</span> <span class="o">~</span><span class="n">rol</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="o">-</span><span class="mi">2</span> <span class="o">*</span> <span class="n">dir</span><span class="p">);</span> <span class="c1">// remove  peg from old position</span></code></pre></figure> <p>Undoing a move can be done accordingly. All of these steps require only a few bitwise operations. A solver with an array-based data structure for the board would likely perform the moves slightly faster, but the move generation itself (which is commonly an expensive task) is done much quicker with this bit-board design.</p> <h4 id="move-ordering">Move Ordering</h4> <p>Finding all possible moves in one direction is as simple as that. However, I added a few lines of code that allow for better move ordering, which is essential for finding a solution faster. With a standard move ordering, the search might take many days. Hence, it might be reasonable to spend CPU time sorting the moves to try more promising ones first. For example, the move ordering defers moves that end up in the corners of the board since it is typically not easy to get out of the corner again. Also, other types of moves are ordered to the back of the list if they do not appear promising.</p> <h4 id="symmetries--transposition-tables">Symmetries &amp; Transposition Tables</h4> <p>When traversing the search tree, many positions repeat since permutations of a move sequence can lead to identical positions. Furthermore, the Diamond-41 board is symmetric, having mirror and rotation symmetries. Hence, we can save computation time if we know the values of repeating positions and their symmetric equivalents. The value of a position is the minimum number of remaining stones of the final state when an optimal move sequence is performed – starting from this particular position. For example, if we know that position \(b_1\) has a corresponding value of \(3\), then a position \(b_2\), which is identical to \(b_1\) after rotation, will also have a value of \(3\). If we store the already known value of positions, we could save some computation time when we observe a (symmetrically) equivalent position again by retrieving and returning the stored value. With such an approach, we could prune the search tree significantly and avoid redundant calculations without losing any information. A common technique used for board games, such as chess, checkers, etc., is the utilization of transposition tables. The idea is to define a suitable hash function that takes the board position (and no historical information of the move sequence that led to this position) and returns a hash value that can be mapped to an index to store the game-theoretic value of a position in a hash table. When we observe a new position, we can calculate the corresponding hash and check if there is an entry in the hash table. If we find an entry, we are lucky and can stop the search for the current position and cut off the connected sub-tree. If not, we have to traverse the connected sub-tree and then store the retrieved value afterward in the table. For our problem, an entry in the table could look like this:</p> <figure class="highlight"><pre><code class="language-c" data-lang="c"><span class="k">struct</span> <span class="n">HashElement</span> <span class="p">{</span>
    <span class="kt">uint64_t</span> <span class="n">key</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">value</span><span class="p">;</span>
<span class="p">};</span></code></pre></figure> <p>Since we are not performing an Alpha-Beta search or similar, there is no need to store further information besides a key and a value. Note that we also have to store a key, which is simply the position itself in this case, since many board positions will map to the same hash table index. This is because the hash function is typically not injective, and the modulo operation is required to break down the hash value to an index. Since it is impossible to prevent collisions, it is always necessary to compare the key of the stored element with the current board position. From this problem, another question arises: What do we do if we want to store a key-value pair in the transposition table, but the corresponding slot is already occupied by another position? The answer for our case is simple: We overwrite the older entry in the table. This approach is often sub-optimal since we might destroy valuable information (especially the values of positions located close to the root node, which was expensive to compute and could be replaced by those of positions that are very close to a leaf node of the tree). However, in our case, it still worked decently. Commonly, the size of the hash table is chosen to be a power of two since the modulo operation to map a hash value to a table index turns out to be simply a bitwise AND:</p> <figure class="highlight"><pre><code class="language-c" data-lang="c">  <span class="kt">int</span> <span class="n">hashIndex</span> <span class="o">=</span> <span class="p">((</span><span class="kt">int</span><span class="p">)</span> <span class="n">hash</span> <span class="o">&amp;</span> <span class="n">HASHMASK</span><span class="p">);</span> <span class="c1">// = hash % pow(2,n)</span></code></pre></figure> <p>where <code class="language-plaintext highlighter-rouge">HASHMASK</code> is the size of the table minus one (\(2^n - 1\)). One last detail has to be mentioned: How do we define the hash function? Typically, so-called Zobrist keys are used for many board games. These are a clever way to encode a position by XOR-ing (exclusive or) random integers. One random number is generated initially and then used throughout the search for each possible move. Whenever a move is performed, the current Zobrist key \(Z\) will be linked by an XOR and the corresponding random number of the move. This approach utilizes the associative and commutative property of the exclusive or as well as the involutory property (\(x \oplus x = 0\) ). In my program, I did not use Zobrist keys for simplicity reasons (but they can also be implemented with relatively little effort). Instead, I use a simple hash function of the form</p> <figure class="highlight"><pre><code class="language-c" data-lang="c"><span class="cm">/*
 * Function to compute the hash for a 64bit variable. Maybe Zobrist keys would
 * // work better (has to be investigated in future).
 ****/</span>
<span class="kt">uint64_t</span> <span class="nf">getHash</span><span class="p">(</span><span class="kt">uint64_t</span> <span class="n">x</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">x</span> <span class="o">=</span> <span class="p">(</span><span class="n">x</span> <span class="o">^</span> <span class="p">(</span><span class="n">x</span> <span class="o">&gt;&gt;</span> <span class="mi">30</span><span class="p">))</span> <span class="o">*</span> <span class="n">UINT64_C</span><span class="p">(</span><span class="mh">0xbf58476d1ce4e5b9</span><span class="p">);</span>
    <span class="n">x</span> <span class="o">=</span> <span class="p">(</span><span class="n">x</span> <span class="o">^</span> <span class="p">(</span><span class="n">x</span> <span class="o">&gt;&gt;</span> <span class="mi">27</span><span class="p">))</span> <span class="o">*</span> <span class="n">UINT64_C</span><span class="p">(</span><span class="mh">0x94d049bb133111eb</span><span class="p">);</span>
    <span class="n">x</span> <span class="o">=</span> <span class="n">x</span> <span class="o">^</span> <span class="p">(</span><span class="n">x</span> <span class="o">&gt;&gt;</span> <span class="mi">31</span><span class="p">);</span>
    <span class="k">return</span> <span class="n">x</span><span class="p">;</span>
<span class="p">}</span></code></pre></figure> <p>which is based on <a href="https://zimbry.blogspot.de/2011/09/better-bit-mixing-improving-on.html">this interesting blog post by David Stafford</a>.</p> <h4 id="finally-the-solution-of-the-diamond-41-peg-solitaire-board">Finally, the Solution of the Diamond-41 Peg Solitaire Board…</h4> <p>After we put all our components for the solver together, we can finally start running it (the whole source code is listed below). Initially, I ran the solver with a modified termination condition: solutions with \(n\) (e.g., \(n=5\)) left-over pegs in the final state were also accepted. A solver can find such a solution faster and be tested this way. After everything worked as intended, the solver was started for \(n=1\) (a solution is searched for where only one peg remains). Surprisingly, the solver found the solution much faster than expected: After about 6 minutes of computation, an optimal move sequence was found. This move sequence is shown in the slideshow below.</p> <div style="width: 70%" class="imgcenter"> <swiper-container keyboard="true" navigation="true" pagination="true" pagination-clickable="true" pagination-dynamic-bullets="true" rewind="true"> <swiper-slide> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire2/Folie01-480.webp 480w,/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire2/Folie01-800.webp 800w,/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire2/Folie01-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire2/Folie01.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </swiper-slide> <swiper-slide> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire2/Folie02-480.webp 480w,/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire2/Folie02-800.webp 800w,/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire2/Folie02-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire2/Folie02.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </swiper-slide> <swiper-slide> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire2/Folie03-480.webp 480w,/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire2/Folie03-800.webp 800w,/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire2/Folie03-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire2/Folie03.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </swiper-slide> <swiper-slide> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire2/Folie04-480.webp 480w,/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire2/Folie04-800.webp 800w,/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire2/Folie04-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire2/Folie04.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </swiper-slide> <swiper-slide> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire2/Folie05-480.webp 480w,/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire2/Folie05-800.webp 800w,/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire2/Folie05-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire2/Folie05.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </swiper-slide> <swiper-slide> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire2/Folie06-480.webp 480w,/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire2/Folie06-800.webp 800w,/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire2/Folie06-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire2/Folie06.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </swiper-slide> <swiper-slide> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire2/Folie07-480.webp 480w,/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire2/Folie07-800.webp 800w,/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire2/Folie07-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire2/Folie07.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </swiper-slide> <swiper-slide> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire2/Folie08-480.webp 480w,/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire2/Folie08-800.webp 800w,/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire2/Folie08-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire2/Folie08.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </swiper-slide> <swiper-slide> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire2/Folie09-480.webp 480w,/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire2/Folie09-800.webp 800w,/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire2/Folie09-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire2/Folie09.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </swiper-slide> <swiper-slide> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire2/Folie10-480.webp 480w,/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire2/Folie10-800.webp 800w,/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire2/Folie10-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire2/Folie10.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </swiper-slide> <swiper-slide> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire2/Folie11-480.webp 480w,/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire2/Folie11-800.webp 800w,/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire2/Folie11-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire2/Folie11.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </swiper-slide> <swiper-slide> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire2/Folie12-480.webp 480w,/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire2/Folie12-800.webp 800w,/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire2/Folie12-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire2/Folie12.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </swiper-slide> <swiper-slide> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire2/Folie13-480.webp 480w,/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire2/Folie13-800.webp 800w,/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire2/Folie13-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire2/Folie13.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </swiper-slide> <swiper-slide> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire2/Folie14-480.webp 480w,/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire2/Folie14-800.webp 800w,/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire2/Folie14-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire2/Folie14.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </swiper-slide> <swiper-slide> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire2/Folie15-480.webp 480w,/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire2/Folie15-800.webp 800w,/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire2/Folie15-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire2/Folie15.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </swiper-slide> <swiper-slide> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire2/Folie16-480.webp 480w,/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire2/Folie16-800.webp 800w,/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire2/Folie16-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire2/Folie16.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </swiper-slide> <swiper-slide> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire2/Folie17-480.webp 480w,/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire2/Folie17-800.webp 800w,/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire2/Folie17-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire2/Folie17.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </swiper-slide> <swiper-slide> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire2/Folie18-480.webp 480w,/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire2/Folie18-800.webp 800w,/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire2/Folie18-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire2/Folie18.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </swiper-slide> <swiper-slide> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire2/Folie19-480.webp 480w,/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire2/Folie19-800.webp 800w,/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire2/Folie19-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire2/Folie19.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </swiper-slide> <swiper-slide> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire2/Folie20-480.webp 480w,/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire2/Folie20-800.webp 800w,/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire2/Folie20-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire2/Folie20.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </swiper-slide> <swiper-slide> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire2/Folie21-480.webp 480w,/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire2/Folie21-800.webp 800w,/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire2/Folie21-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire2/Folie21.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </swiper-slide> <swiper-slide> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire2/Folie22-480.webp 480w,/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire2/Folie22-800.webp 800w,/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire2/Folie22-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire2/Folie22.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </swiper-slide> <swiper-slide> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire2/Folie23-480.webp 480w,/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire2/Folie23-800.webp 800w,/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire2/Folie23-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire2/Folie23.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </swiper-slide> <swiper-slide> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire2/Folie24-480.webp 480w,/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire2/Folie24-800.webp 800w,/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire2/Folie24-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire2/Folie24.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </swiper-slide> <swiper-slide> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire2/Folie25-480.webp 480w,/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire2/Folie25-800.webp 800w,/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire2/Folie25-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire2/Folie25.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </swiper-slide> <swiper-slide> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire2/Folie26-480.webp 480w,/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire2/Folie26-800.webp 800w,/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire2/Folie26-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire2/Folie26.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </swiper-slide> <swiper-slide> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire2/Folie27-480.webp 480w,/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire2/Folie27-800.webp 800w,/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire2/Folie27-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire2/Folie27.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </swiper-slide> <swiper-slide> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire2/Folie28-480.webp 480w,/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire2/Folie28-800.webp 800w,/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire2/Folie28-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire2/Folie28.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </swiper-slide> <swiper-slide> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire2/Folie29-480.webp 480w,/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire2/Folie29-800.webp 800w,/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire2/Folie29-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire2/Folie29.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </swiper-slide> <swiper-slide> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire2/Folie30-480.webp 480w,/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire2/Folie30-800.webp 800w,/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire2/Folie30-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire2/Folie30.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </swiper-slide> <swiper-slide> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire2/Folie31-480.webp 480w,/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire2/Folie31-800.webp 800w,/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire2/Folie31-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire2/Folie31.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </swiper-slide> <swiper-slide> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire2/Folie32-480.webp 480w,/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire2/Folie32-800.webp 800w,/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire2/Folie32-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire2/Folie32.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </swiper-slide> <swiper-slide> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire2/Folie33-480.webp 480w,/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire2/Folie33-800.webp 800w,/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire2/Folie33-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire2/Folie33.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </swiper-slide> <swiper-slide> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire2/Folie34-480.webp 480w,/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire2/Folie34-800.webp 800w,/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire2/Folie34-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire2/Folie34.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </swiper-slide> <swiper-slide> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire2/Folie35-480.webp 480w,/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire2/Folie35-800.webp 800w,/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire2/Folie35-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire2/Folie35.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </swiper-slide> <swiper-slide> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire2/Folie36-480.webp 480w,/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire2/Folie36-800.webp 800w,/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire2/Folie36-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire2/Folie36.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </swiper-slide> <swiper-slide> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire2/Folie37-480.webp 480w,/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire2/Folie37-800.webp 800w,/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire2/Folie37-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire2/Folie37.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </swiper-slide> <swiper-slide> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire2/Folie38-480.webp 480w,/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire2/Folie38-800.webp 800w,/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire2/Folie38-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire2/Folie38.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </swiper-slide> <swiper-slide> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire2/Folie39-480.webp 480w,/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire2/Folie39-800.webp 800w,/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire2/Folie39-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire2/Folie39.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </swiper-slide> <swiper-slide> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire2/Folie40-480.webp 480w,/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire2/Folie40-800.webp 800w,/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire2/Folie40-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire2/Folie40.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </swiper-slide> <swiper-slide> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire2/Folie41-480.webp 480w,/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire2/Folie41-800.webp 800w,/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire2/Folie41-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/2024-04-26-solving-peg-solitaire/peg-solitaire2/Folie41.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </swiper-slide> </swiper-container> </div> <h2 id="source-code-for-solving-the-diamond-41-peg-solitaire">Source Code for Solving the Diamond-41 Peg Solitaire</h2> <p>The following code should be compile-able with most C compilers (<code class="language-plaintext highlighter-rouge">gcc</code>, etc.). When running the binary file, you will need some patience. The solver will require several minutes, up to one hour (depending on your machine and the size of the transposition table). Once the result is found, the program will list all moves and print the positions in reverse order.</p> <figure class="highlight"><pre><code class="language-c" data-lang="c"><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;stdint.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;sys/time.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;time.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;stdlib.h&gt;</span><span class="cp">
</span>
<span class="k">static</span> <span class="k">const</span> <span class="kt">int</span> <span class="n">TERM_CRITERION</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>

<span class="c1">// Specifying some constants</span>
<span class="k">const</span> <span class="kt">uint64_t</span> <span class="n">ZERO</span> <span class="o">=</span> <span class="mh">0x1</span><span class="n">p0</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
<span class="k">const</span> <span class="kt">uint64_t</span> <span class="n">B32</span> <span class="o">=</span> <span class="mh">0x1</span><span class="n">p32</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
<span class="k">const</span> <span class="kt">uint64_t</span> <span class="n">B16</span> <span class="o">=</span> <span class="mh">0x1</span><span class="n">p16</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
<span class="k">const</span> <span class="kt">uint64_t</span> <span class="n">B08</span> <span class="o">=</span> <span class="mh">0x1</span><span class="n">p8</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
<span class="k">const</span> <span class="kt">uint64_t</span> <span class="n">B04</span> <span class="o">=</span> <span class="mh">0x1</span><span class="n">p4</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
<span class="k">const</span> <span class="kt">uint64_t</span> <span class="n">B02</span> <span class="o">=</span> <span class="mh">0x1</span><span class="n">p2</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
<span class="k">const</span> <span class="kt">uint64_t</span> <span class="n">B01</span> <span class="o">=</span> <span class="mh">0x1</span><span class="n">p1</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
<span class="kt">uint64_t</span> <span class="n">BORDER</span> <span class="o">=</span> <span class="mh">0x1</span><span class="n">p0</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
<span class="kt">uint64_t</span> <span class="n">BOARD</span> <span class="o">=</span> <span class="mh">0x1</span><span class="n">p0</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>

<span class="c1">// Contains bit-masks masking the lowest n bits</span>
<span class="k">const</span> <span class="kt">uint64_t</span> <span class="n">B_LVL</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span><span class="n">B01</span><span class="p">,</span> <span class="n">B02</span><span class="p">,</span> <span class="n">B04</span><span class="p">,</span> <span class="n">B08</span><span class="p">,</span> <span class="n">B16</span><span class="p">,</span> <span class="n">B32</span><span class="p">};</span>

<span class="c1">// Size of the board (number of holes</span>
<span class="k">const</span> <span class="kt">int</span> <span class="n">NUMBOARDBITS</span> <span class="o">=</span> <span class="mi">41</span><span class="p">;</span>

<span class="c1">// After initialization, this array will contain the bit-numbers of all holes starting</span>
<span class="c1">// from the top (left to right in the rows).</span>
<span class="kt">int</span> <span class="n">BOARDBITS</span><span class="p">[</span><span class="n">NUMBOARDBITS</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="mi">0</span><span class="p">};</span>

<span class="c1">// Number of bits that specify the border. Note that several bits are used as border</span>
<span class="c1">// on both sides of the board. This is due to the addressing scheme of the board and</span>
<span class="c1">// does not do any harm.</span>
<span class="k">const</span> <span class="kt">int</span> <span class="n">NUMBOUNDARYBITS</span> <span class="o">=</span> <span class="mi">15</span><span class="p">;</span>

<span class="c1">// The actual bits that specify the border of the board</span>
<span class="k">const</span> <span class="kt">int</span> <span class="n">BOUNDARYBITS</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span><span class="mi">5</span><span class="p">,</span> <span class="mi">14</span><span class="p">,</span> <span class="mi">23</span><span class="p">,</span> <span class="mi">32</span><span class="p">,</span> <span class="mi">41</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">39</span><span class="p">,</span> <span class="mi">28</span><span class="p">,</span> <span class="mi">17</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">59</span><span class="p">,</span> <span class="mi">25</span><span class="p">,</span> <span class="mi">36</span><span class="p">,</span> <span class="mi">47</span><span class="p">,</span> <span class="mi">58</span><span class="p">};</span>

<span class="c1">// Specifies the corners (edge) of the board. Required to prevent moves into the corners</span>
<span class="c1">// (or actually try them later)</span>
<span class="k">const</span> <span class="kt">int</span> <span class="n">NUMCORNERS</span> <span class="o">=</span> <span class="mi">16</span><span class="p">;</span>
<span class="k">const</span> <span class="kt">int</span> <span class="n">CORNERBITS</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span><span class="mi">4</span><span class="p">,</span> <span class="mi">13</span><span class="p">,</span> <span class="mi">22</span><span class="p">,</span> <span class="mi">31</span><span class="p">,</span> <span class="mi">40</span><span class="p">,</span> <span class="mi">29</span><span class="p">,</span> <span class="mi">18</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">60</span><span class="p">,</span> <span class="mi">51</span><span class="p">,</span> <span class="mi">42</span><span class="p">,</span> <span class="mi">33</span><span class="p">,</span> <span class="mi">24</span><span class="p">,</span> <span class="mi">35</span><span class="p">,</span> <span class="mi">46</span><span class="p">,</span> <span class="mi">57</span><span class="p">};</span>

<span class="c1">// actual bit-mask for all the corner holes</span>
<span class="kt">uint64_t</span> <span class="n">CORNERS</span> <span class="o">=</span> <span class="n">UINT64_C</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>

<span class="c1">// How many rows (columns) does the board have</span>
<span class="k">const</span> <span class="kt">int</span> <span class="n">NUMROWS</span> <span class="o">=</span> <span class="mi">9</span><span class="p">;</span>

<span class="c1">// Operations for moving the pegs. An UP-operation will cause all pegs of the board to be</span>
<span class="c1">// moved up by one (some might be moved into the boundary).</span>
<span class="k">static</span> <span class="k">const</span> <span class="kt">int</span> <span class="n">UP</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
<span class="k">static</span> <span class="k">const</span> <span class="kt">int</span> <span class="n">DOWN</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
<span class="k">static</span> <span class="k">const</span> <span class="kt">int</span> <span class="n">LEFT</span> <span class="o">=</span> <span class="o">-</span><span class="mi">10</span><span class="p">;</span>
<span class="k">static</span> <span class="k">const</span> <span class="kt">int</span> <span class="n">RIGHT</span> <span class="o">=</span> <span class="o">+</span><span class="mi">10</span><span class="p">;</span>
<span class="k">static</span> <span class="k">const</span> <span class="kt">int</span> <span class="n">DIRECTIONS</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span><span class="n">DOWN</span><span class="p">,</span> <span class="n">LEFT</span><span class="p">,</span> <span class="n">UP</span><span class="p">,</span> <span class="n">RIGHT</span><span class="p">};</span>


<span class="c1">// Constants for the transposition table. Using this table can significantly reduce the</span>
<span class="c1">// the efforts for the backtracking algorithm, since re-occuring positions do not have to</span>
<span class="c1">// be searched twice. Permutations of one move sequence might lead to the same position,</span>
<span class="c1">// which only has to be investigated once.</span>
<span class="k">static</span> <span class="k">const</span> <span class="kt">int</span> <span class="n">HASHSIZE</span> <span class="o">=</span> <span class="p">(</span><span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="mi">25</span><span class="p">);</span>
<span class="k">static</span> <span class="k">const</span> <span class="kt">int</span> <span class="n">HASHMASK</span> <span class="o">=</span> <span class="n">HASHSIZE</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
<span class="k">static</span> <span class="k">const</span> <span class="kt">int</span> <span class="n">HASHMISS</span> <span class="o">=</span> <span class="o">-</span><span class="mi">99</span><span class="p">;</span>

<span class="c1">// Number of symmetries. In total there are actually 8 symmetric positions for each board.</span>
<span class="c1">// Currently, only vertically and horizontally mirrored positions are considered. Rotations</span>
<span class="c1">// are not yet implemented.</span>
<span class="k">static</span> <span class="k">const</span> <span class="kt">int</span> <span class="n">NUMSYMMETRIES</span> <span class="o">=</span> <span class="mi">4</span><span class="p">;</span>

<span class="c1">// Masks for horizontal and vertical lines. Needed for mirroring a board along the vertical or</span>
<span class="c1">// horizontal axis</span>
<span class="k">static</span> <span class="kt">uint64_t</span> <span class="n">HORLINES</span><span class="p">[</span><span class="n">NUMROWS</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="mi">0</span><span class="p">};</span>
<span class="k">static</span> <span class="kt">uint64_t</span> <span class="n">VERTLINES</span><span class="p">[</span><span class="n">NUMROWS</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="mi">0</span><span class="p">};</span>

<span class="c1">// Definition of one element of the transposition table. It contains a key (actual board, since several positions</span>
<span class="c1">// can be mapped to the same hash-table entry) and a value (number of remaining pegs when solving this specific</span>
<span class="c1">// position).</span>
<span class="k">struct</span> <span class="n">HashElement</span> <span class="p">{</span>
    <span class="kt">uint64_t</span> <span class="n">key</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">value</span><span class="p">;</span>
<span class="p">};</span>
<span class="k">struct</span> <span class="n">HashElement</span> <span class="n">hashTable</span><span class="p">[</span><span class="n">HASHSIZE</span><span class="p">];</span>

<span class="cm">/*
 * Modulo operator, since the %-operator is the remainder and cannot deal with negative integers
 */</span>
<span class="kt">int</span> <span class="nf">mod</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">,</span> <span class="kt">int</span> <span class="n">b</span><span class="p">)</span> <span class="p">{</span>
    <span class="kt">int</span> <span class="n">r</span> <span class="o">=</span> <span class="n">a</span> <span class="o">%</span> <span class="n">b</span><span class="p">;</span>
    <span class="k">return</span> <span class="n">r</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="o">?</span> <span class="n">r</span> <span class="o">+</span> <span class="n">b</span> <span class="o">:</span> <span class="n">r</span><span class="p">;</span>
<span class="p">}</span>

<span class="cm">/*
 * Determines the position of a single bit in a 64bit variable in logarithmic time.
 */</span>
<span class="kt">int</span> <span class="nf">bitPos</span><span class="p">(</span><span class="kt">uint64_t</span> <span class="n">x</span><span class="p">)</span> <span class="p">{</span>
    <span class="kt">int</span> <span class="n">bPos</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">5</span><span class="p">;</span> <span class="n">i</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">--</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">((</span><span class="n">x</span> <span class="o">&amp;</span> <span class="n">B_LVL</span><span class="p">[</span><span class="n">i</span><span class="p">])</span> <span class="o">==</span> <span class="n">ZERO</span><span class="p">)</span> <span class="p">{</span>
            <span class="kt">int</span> <span class="n">nBits</span> <span class="o">=</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span> <span class="n">B01</span> <span class="o">&lt;&lt;</span> <span class="n">i</span><span class="p">;</span>
            <span class="n">x</span> <span class="o">&gt;&gt;=</span> <span class="n">nBits</span><span class="p">;</span>
            <span class="n">bPos</span> <span class="o">+=</span> <span class="n">nBits</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="n">bPos</span><span class="p">;</span>
<span class="p">}</span>

<span class="cm">/*
 * Fast way to count the one-bits in a 64-bit variable.
 * Only requires as many iterations as bits are set.
 */</span>
<span class="kt">int</span> <span class="nf">bitCount</span><span class="p">(</span><span class="kt">uint64_t</span> <span class="n">x</span><span class="p">)</span> <span class="p">{</span>
    <span class="kt">int</span> <span class="n">c</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="k">while</span> <span class="p">(</span><span class="n">x</span> <span class="o">!=</span> <span class="n">ZERO</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">x</span> <span class="o">&amp;=</span> <span class="p">(</span><span class="n">x</span> <span class="o">-</span> <span class="n">UINT64_C</span><span class="p">(</span><span class="mi">1</span><span class="p">));</span>
        <span class="n">c</span><span class="o">++</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="n">c</span><span class="p">;</span>
<span class="p">}</span>

<span class="cm">/*
 * Rotatate 64-bit variable x by y bits. Note that this is not a shift-operation but a real
 * rotate-left
 */</span>
<span class="k">static</span> <span class="kr">inline</span> <span class="kt">uint64_t</span> <span class="nf">rol</span><span class="p">(</span><span class="kt">uint64_t</span> <span class="n">x</span><span class="p">,</span> <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">y</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">__asm__</span> <span class="p">(</span><span class="s">"rolq %1, %0"</span> <span class="o">:</span> <span class="s">"+g"</span> <span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="o">:</span> <span class="s">"cJ"</span> <span class="p">((</span><span class="kt">unsigned</span> <span class="kt">char</span><span class="p">)</span> <span class="n">y</span><span class="p">));</span>
    <span class="k">return</span> <span class="n">x</span><span class="p">;</span>
<span class="p">}</span>

<span class="cm">/*
 * Compute the bit indexes of the board from top to bottom (left to right in the rows) and from left to
 * right (from top to bottom in each column)
 */</span>
<span class="kt">void</span> <span class="nf">initBOARDBits</span><span class="p">()</span> <span class="p">{</span>
    <span class="kt">int</span> <span class="n">i</span><span class="p">,</span> <span class="n">startRow</span> <span class="o">=</span> <span class="mi">4</span><span class="p">,</span> <span class="n">startCol</span> <span class="o">=</span> <span class="mi">24</span><span class="p">,</span> <span class="n">nrow</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span> <span class="n">j</span><span class="p">,</span> <span class="n">k</span><span class="p">,</span> <span class="n">l</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">m</span><span class="p">;</span>
    <span class="c1">// start with top cell and move line by line through</span>
    <span class="c1">// the board (from left to right in each row).</span>
    <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">NUMROWS</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">k</span> <span class="o">=</span> <span class="n">startRow</span><span class="p">;</span>
        <span class="n">m</span> <span class="o">=</span> <span class="n">startCol</span><span class="p">;</span>
        <span class="k">for</span> <span class="p">(</span><span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">nrow</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">,</span> <span class="n">k</span> <span class="o">=</span> <span class="p">(</span><span class="n">k</span> <span class="o">+</span> <span class="mi">10</span><span class="p">)</span> <span class="o">%</span> <span class="mi">64</span><span class="p">,</span> <span class="n">m</span><span class="o">--</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">BOARDBITS</span><span class="p">[</span><span class="n">l</span><span class="o">++</span><span class="p">]</span> <span class="o">=</span> <span class="n">k</span><span class="p">;</span>
            <span class="n">HORLINES</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">|=</span> <span class="p">(</span><span class="n">UINT64_C</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">k</span><span class="p">);</span>
            <span class="n">VERTLINES</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">|=</span> <span class="p">(</span><span class="n">UINT64_C</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">m</span><span class="p">);</span>
        <span class="p">}</span>
        <span class="n">nrow</span> <span class="o">=</span> <span class="p">(</span><span class="n">i</span> <span class="o">&lt;</span> <span class="mi">4</span> <span class="o">?</span> <span class="n">nrow</span> <span class="o">+</span> <span class="mi">2</span> <span class="o">:</span> <span class="n">nrow</span> <span class="o">-</span> <span class="mi">2</span><span class="p">);</span>

        <span class="c1">// % operator is a remainder operator and not a modulo operator</span>
        <span class="n">startRow</span> <span class="o">=</span> <span class="n">mod</span><span class="p">((</span><span class="n">i</span> <span class="o">&lt;</span> <span class="mi">4</span> <span class="o">?</span> <span class="n">startRow</span> <span class="o">-</span> <span class="mi">11</span> <span class="o">:</span> <span class="n">startRow</span> <span class="o">+</span> <span class="mi">9</span><span class="p">),</span> <span class="mi">64</span><span class="p">);</span>
        <span class="n">startCol</span> <span class="o">=</span> <span class="n">mod</span><span class="p">((</span><span class="n">i</span> <span class="o">&lt;</span> <span class="mi">4</span> <span class="o">?</span> <span class="n">startCol</span> <span class="o">+</span> <span class="mi">11</span> <span class="o">:</span> <span class="n">startCol</span> <span class="o">+</span> <span class="mi">9</span><span class="p">),</span> <span class="mi">64</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="cm">/*
 * Initialize the bit-masks that describe the boundary and the actual board.
 */</span>
<span class="kt">void</span> <span class="nf">initBoardnBoundary</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">NUMBOUNDARYBITS</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
        <span class="n">BORDER</span> <span class="o">|=</span> <span class="p">(</span><span class="n">UINT64_C</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">BOUNDARYBITS</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">NUMBOARDBITS</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
        <span class="n">BOARD</span> <span class="o">|=</span> <span class="p">(</span><span class="n">UINT64_C</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">BOARDBITS</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
<span class="p">}</span>

<span class="cm">/*
 * Init the bit-mask representing all 16 corner holes of the board
 */</span>
<span class="kt">void</span> <span class="nf">initCorners</span><span class="p">()</span> <span class="p">{</span>
    <span class="n">CORNERS</span> <span class="o">=</span> <span class="n">UINT64_C</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">NUMCORNERS</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">CORNERS</span> <span class="o">|=</span> <span class="p">(</span><span class="n">UINT64_C</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">CORNERBITS</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="cm">/*
 * Initialize the transposition table
 */</span>
<span class="kt">void</span> <span class="nf">initHashTable</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">HASHSIZE</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">hashTable</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">key</span> <span class="o">=</span> <span class="mi">0UL</span><span class="p">;</span>
        <span class="n">hashTable</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">value</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">init</span><span class="p">()</span> <span class="p">{</span>
    <span class="n">initBOARDBits</span><span class="p">();</span>
    <span class="n">initBoardnBoundary</span><span class="p">();</span>
    <span class="n">initHashTable</span><span class="p">();</span>
    <span class="n">initCorners</span><span class="p">();</span>
<span class="p">}</span>


<span class="cm">/*
 * Function to print the board to console
 */</span>
<span class="kt">void</span> <span class="nf">printBoard</span><span class="p">(</span><span class="kt">uint64_t</span> <span class="n">b</span><span class="p">)</span> <span class="p">{</span>
    <span class="kt">int</span> <span class="n">l</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">nrow</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">"</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">NUMROWS</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>

        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">k</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">k</span> <span class="o">&lt;</span> <span class="n">NUMROWS</span> <span class="o">-</span> <span class="n">nrow</span><span class="p">;</span> <span class="n">k</span><span class="o">++</span><span class="p">)</span>
            <span class="n">printf</span><span class="p">(</span><span class="s">" "</span><span class="p">);</span>
        <span class="n">printf</span><span class="p">(</span><span class="s">"|"</span><span class="p">);</span>
        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">nrow</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
            <span class="c1">//char symb = 'o';</span>
            <span class="kt">char</span> <span class="n">symb</span> <span class="o">=</span> <span class="p">((</span><span class="mi">1UL</span> <span class="o">&lt;&lt;</span> <span class="n">BOARDBITS</span><span class="p">[</span><span class="n">l</span><span class="o">++</span><span class="p">])</span> <span class="o">&amp;</span> <span class="n">b</span><span class="p">)</span> <span class="o">!=</span> <span class="n">ZERO</span> <span class="o">?</span> <span class="sc">'x'</span> <span class="o">:</span> <span class="sc">'o'</span><span class="p">;</span>
            <span class="n">printf</span><span class="p">(</span><span class="s">"%c|"</span><span class="p">,</span> <span class="n">symb</span><span class="p">);</span>
        <span class="p">}</span>
        <span class="n">printf</span><span class="p">(</span><span class="s">"</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
        <span class="n">nrow</span> <span class="o">=</span> <span class="p">(</span><span class="n">i</span> <span class="o">&lt;</span> <span class="mi">4</span> <span class="o">?</span> <span class="n">nrow</span> <span class="o">+</span> <span class="mi">2</span> <span class="o">:</span> <span class="n">nrow</span> <span class="o">-</span> <span class="mi">2</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">"</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
<span class="p">}</span>

<span class="cm">/*
 * Removes one peg from the board and returns the modified board
 */</span>
<span class="kt">uint64_t</span> <span class="nf">removePeg</span><span class="p">(</span><span class="kt">uint64_t</span> <span class="n">b</span><span class="p">,</span> <span class="kt">int</span> <span class="n">bit</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="n">b</span> <span class="o">&amp;</span> <span class="p">(</span><span class="o">~</span><span class="p">(</span><span class="mi">1UL</span> <span class="o">&lt;&lt;</span> <span class="n">bit</span><span class="p">));</span>
<span class="p">}</span>

<span class="cm">/*
 * Place a peg at a certain position and return the modified board
 */</span>
<span class="kt">uint64_t</span> <span class="nf">setPeg</span><span class="p">(</span><span class="kt">uint64_t</span> <span class="n">b</span><span class="p">,</span> <span class="kt">int</span> <span class="n">bit</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="n">b</span> <span class="o">|</span> <span class="p">(</span><span class="mi">1UL</span> <span class="o">&lt;&lt;</span> <span class="n">bit</span><span class="p">);</span>
<span class="p">}</span>


<span class="cm">/*
 * Function to compute the hash for a 64bit variable. Maybe Zobrist keys would work better (has to be investigated
 * in future).
 */</span>
<span class="kt">uint64_t</span> <span class="nf">getHash</span><span class="p">(</span><span class="kt">uint64_t</span> <span class="n">x</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">x</span> <span class="o">=</span> <span class="p">(</span><span class="n">x</span> <span class="o">^</span> <span class="p">(</span><span class="n">x</span> <span class="o">&gt;&gt;</span> <span class="mi">30</span><span class="p">))</span> <span class="o">*</span> <span class="n">UINT64_C</span><span class="p">(</span><span class="mh">0xbf58476d1ce4e5b9</span><span class="p">);</span>
    <span class="n">x</span> <span class="o">=</span> <span class="p">(</span><span class="n">x</span> <span class="o">^</span> <span class="p">(</span><span class="n">x</span> <span class="o">&gt;&gt;</span> <span class="mi">27</span><span class="p">))</span> <span class="o">*</span> <span class="n">UINT64_C</span><span class="p">(</span><span class="mh">0x94d049bb133111eb</span><span class="p">);</span>
    <span class="n">x</span> <span class="o">=</span> <span class="n">x</span> <span class="o">^</span> <span class="p">(</span><span class="n">x</span> <span class="o">&gt;&gt;</span> <span class="mi">31</span><span class="p">);</span>
    <span class="k">return</span> <span class="n">x</span><span class="p">;</span>
<span class="p">}</span>

<span class="cm">/*
 * Mirror a board along the horizontal axis. This can be done quite fast.
 */</span>
<span class="kt">uint64_t</span> <span class="nf">mirrorHor</span><span class="p">(</span><span class="kt">uint64_t</span> <span class="n">b</span><span class="p">)</span> <span class="p">{</span>
    <span class="kt">uint64_t</span> <span class="n">m</span> <span class="o">=</span> <span class="n">b</span> <span class="o">&amp;</span> <span class="n">HORLINES</span><span class="p">[</span><span class="mi">4</span><span class="p">];</span>
    <span class="n">m</span> <span class="o">|=</span> <span class="n">rol</span><span class="p">(</span><span class="n">b</span> <span class="o">&amp;</span> <span class="n">HORLINES</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="mi">8</span> <span class="o">*</span> <span class="n">DOWN</span><span class="p">);</span> <span class="c1">// First row</span>
    <span class="n">m</span> <span class="o">|=</span> <span class="n">rol</span><span class="p">(</span><span class="n">b</span> <span class="o">&amp;</span> <span class="n">HORLINES</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="mi">6</span> <span class="o">*</span> <span class="n">DOWN</span><span class="p">);</span> <span class="c1">// Second row</span>
    <span class="n">m</span> <span class="o">|=</span> <span class="n">rol</span><span class="p">(</span><span class="n">b</span> <span class="o">&amp;</span> <span class="n">HORLINES</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span> <span class="mi">4</span> <span class="o">*</span> <span class="n">DOWN</span><span class="p">);</span> <span class="c1">// Third row</span>
    <span class="n">m</span> <span class="o">|=</span> <span class="n">rol</span><span class="p">(</span><span class="n">b</span> <span class="o">&amp;</span> <span class="n">HORLINES</span><span class="p">[</span><span class="mi">3</span><span class="p">],</span> <span class="mi">2</span> <span class="o">*</span> <span class="n">DOWN</span><span class="p">);</span> <span class="c1">// Fourth row</span>
    <span class="n">m</span> <span class="o">|=</span> <span class="n">rol</span><span class="p">(</span><span class="n">b</span> <span class="o">&amp;</span> <span class="n">HORLINES</span><span class="p">[</span><span class="mi">5</span><span class="p">],</span> <span class="mi">2</span> <span class="o">*</span> <span class="n">UP</span><span class="p">);</span>   <span class="c1">// Sixth row</span>
    <span class="n">m</span> <span class="o">|=</span> <span class="n">rol</span><span class="p">(</span><span class="n">b</span> <span class="o">&amp;</span> <span class="n">HORLINES</span><span class="p">[</span><span class="mi">6</span><span class="p">],</span> <span class="mi">4</span> <span class="o">*</span> <span class="n">UP</span><span class="p">);</span>   <span class="c1">// Seventh row</span>
    <span class="n">m</span> <span class="o">|=</span> <span class="n">rol</span><span class="p">(</span><span class="n">b</span> <span class="o">&amp;</span> <span class="n">HORLINES</span><span class="p">[</span><span class="mi">7</span><span class="p">],</span> <span class="mi">6</span> <span class="o">*</span> <span class="n">UP</span><span class="p">);</span>   <span class="c1">// Eighth row</span>
    <span class="n">m</span> <span class="o">|=</span> <span class="n">rol</span><span class="p">(</span><span class="n">b</span> <span class="o">&amp;</span> <span class="n">HORLINES</span><span class="p">[</span><span class="mi">8</span><span class="p">],</span> <span class="mi">8</span> <span class="o">*</span> <span class="n">UP</span><span class="p">);</span>   <span class="c1">// Ninth row</span>
    <span class="k">return</span> <span class="n">m</span><span class="p">;</span>
<span class="p">}</span>

<span class="cm">/*
 * Mirror a board along the vertical axis. This can be done quite fast.
 */</span>
<span class="kt">uint64_t</span> <span class="nf">mirrorVert</span><span class="p">(</span><span class="kt">uint64_t</span> <span class="n">b</span><span class="p">)</span> <span class="p">{</span>
    <span class="kt">uint64_t</span> <span class="n">m</span> <span class="o">=</span> <span class="n">b</span> <span class="o">&amp;</span> <span class="n">VERTLINES</span><span class="p">[</span><span class="mi">4</span><span class="p">];</span>
    <span class="n">m</span> <span class="o">|=</span> <span class="n">rol</span><span class="p">(</span><span class="n">b</span> <span class="o">&amp;</span> <span class="n">VERTLINES</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="mi">8</span> <span class="o">*</span> <span class="n">RIGHT</span><span class="p">);</span> <span class="c1">// First Column</span>
    <span class="n">m</span> <span class="o">|=</span> <span class="n">rol</span><span class="p">(</span><span class="n">b</span> <span class="o">&amp;</span> <span class="n">VERTLINES</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="mi">6</span> <span class="o">*</span> <span class="n">RIGHT</span><span class="p">);</span> <span class="c1">// Second Column</span>
    <span class="n">m</span> <span class="o">|=</span> <span class="n">rol</span><span class="p">(</span><span class="n">b</span> <span class="o">&amp;</span> <span class="n">VERTLINES</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span> <span class="mi">4</span> <span class="o">*</span> <span class="n">RIGHT</span><span class="p">);</span> <span class="c1">// Third Column</span>
    <span class="n">m</span> <span class="o">|=</span> <span class="n">rol</span><span class="p">(</span><span class="n">b</span> <span class="o">&amp;</span> <span class="n">VERTLINES</span><span class="p">[</span><span class="mi">3</span><span class="p">],</span> <span class="mi">2</span> <span class="o">*</span> <span class="n">RIGHT</span><span class="p">);</span> <span class="c1">// Fourth Column</span>
    <span class="n">m</span> <span class="o">|=</span> <span class="n">rol</span><span class="p">(</span><span class="n">b</span> <span class="o">&amp;</span> <span class="n">VERTLINES</span><span class="p">[</span><span class="mi">5</span><span class="p">],</span> <span class="mi">2</span> <span class="o">*</span> <span class="n">LEFT</span><span class="p">);</span> <span class="c1">// Sixth Column</span>
    <span class="n">m</span> <span class="o">|=</span> <span class="n">rol</span><span class="p">(</span><span class="n">b</span> <span class="o">&amp;</span> <span class="n">VERTLINES</span><span class="p">[</span><span class="mi">6</span><span class="p">],</span> <span class="mi">4</span> <span class="o">*</span> <span class="n">LEFT</span><span class="p">);</span> <span class="c1">// Seventh Column</span>
    <span class="n">m</span> <span class="o">|=</span> <span class="n">rol</span><span class="p">(</span><span class="n">b</span> <span class="o">&amp;</span> <span class="n">VERTLINES</span><span class="p">[</span><span class="mi">7</span><span class="p">],</span> <span class="mi">6</span> <span class="o">*</span> <span class="n">LEFT</span><span class="p">);</span> <span class="c1">// Eighth Column</span>
    <span class="n">m</span> <span class="o">|=</span> <span class="n">rol</span><span class="p">(</span><span class="n">b</span> <span class="o">&amp;</span> <span class="n">VERTLINES</span><span class="p">[</span><span class="mi">8</span><span class="p">],</span> <span class="mi">8</span> <span class="o">*</span> <span class="n">LEFT</span><span class="p">);</span> <span class="c1">// Ninth Column</span>
    <span class="k">return</span> <span class="n">m</span><span class="p">;</span>
<span class="p">}</span>

<span class="cm">/*
 * Compute all mirrored positions for a board b and return all in the array m
 */</span>
<span class="kt">void</span> <span class="nf">mirror</span><span class="p">(</span><span class="kt">uint64_t</span> <span class="n">b</span><span class="p">,</span> <span class="kt">uint64_t</span> <span class="n">m</span><span class="p">[])</span> <span class="p">{</span>
    <span class="n">m</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="n">b</span><span class="p">;</span>
    <span class="n">m</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">mirrorVert</span><span class="p">(</span><span class="n">b</span><span class="p">);</span>
    <span class="n">m</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="n">mirrorHor</span><span class="p">(</span><span class="n">b</span><span class="p">);</span>
    <span class="n">m</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span> <span class="o">=</span> <span class="n">mirrorHor</span><span class="p">(</span><span class="n">m</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span>
<span class="p">}</span>

<span class="cm">/*
 * Check if a position b or a mirrored equivalent is already stored in the transposition table. If yes, then
 * return the value for this position.
 */</span>
<span class="kt">int</span> <span class="nf">getTransposition</span><span class="p">(</span><span class="kt">uint64_t</span> <span class="n">b</span><span class="p">)</span> <span class="p">{</span>
    <span class="kt">uint64_t</span> <span class="n">m</span><span class="p">[</span><span class="n">NUMSYMMETRIES</span><span class="p">];</span>
    <span class="n">mirror</span><span class="p">(</span><span class="n">b</span><span class="p">,</span> <span class="n">m</span><span class="p">);</span>

    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">NUMSYMMETRIES</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="kt">uint64_t</span> <span class="n">hash</span> <span class="o">=</span> <span class="n">getHash</span><span class="p">(</span><span class="n">m</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
        <span class="kt">int</span> <span class="n">hashIndex</span> <span class="o">=</span> <span class="p">((</span><span class="kt">int</span><span class="p">)</span> <span class="n">hash</span> <span class="o">&amp;</span> <span class="n">HASHMASK</span><span class="p">);</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">hashTable</span><span class="p">[</span><span class="n">hashIndex</span><span class="p">].</span><span class="n">key</span> <span class="o">==</span> <span class="n">m</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
            <span class="k">return</span> <span class="n">hashTable</span><span class="p">[</span><span class="n">hashIndex</span><span class="p">].</span><span class="n">value</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="n">HASHMISS</span><span class="p">;</span>
<span class="p">}</span>

<span class="cm">/*
 * After a position is completely evaluated, store the value of the position in the transposition table
 */</span>
<span class="kt">void</span> <span class="nf">putTransposition</span><span class="p">(</span><span class="kt">uint64_t</span> <span class="n">b</span><span class="p">,</span> <span class="kt">int</span> <span class="n">value</span><span class="p">)</span> <span class="p">{</span>
    <span class="kt">uint64_t</span> <span class="n">hash</span> <span class="o">=</span> <span class="n">getHash</span><span class="p">(</span><span class="n">b</span><span class="p">);</span>
    <span class="kt">int</span> <span class="n">hashIndex</span> <span class="o">=</span> <span class="p">((</span><span class="kt">int</span><span class="p">)</span> <span class="n">hash</span> <span class="o">&amp;</span> <span class="n">HASHMASK</span><span class="p">);</span>
    <span class="n">hashTable</span><span class="p">[</span><span class="n">hashIndex</span><span class="p">].</span><span class="n">key</span> <span class="o">=</span> <span class="n">b</span><span class="p">;</span>
    <span class="n">hashTable</span><span class="p">[</span><span class="n">hashIndex</span><span class="p">].</span><span class="n">value</span> <span class="o">=</span> <span class="n">value</span><span class="p">;</span>
<span class="p">}</span>

<span class="cm">/*
 * Generates a list of possible moves in all directions for a board position b.
 *
 */</span>
<span class="kt">void</span> <span class="nf">generateMoves</span><span class="p">(</span><span class="kt">uint64_t</span> <span class="n">b</span><span class="p">,</span> <span class="kt">uint64_t</span> <span class="o">*</span><span class="k">const</span> <span class="n">allmv</span><span class="p">)</span> <span class="p">{</span><span class="c1">// Generate all possible moves</span>
    <span class="kt">int</span> <span class="n">dir</span><span class="p">;</span>
    <span class="kt">uint64_t</span> <span class="n">mv</span><span class="p">;</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">4</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">dir</span> <span class="o">=</span> <span class="n">DIRECTIONS</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
        <span class="n">mv</span> <span class="o">=</span> <span class="n">rol</span><span class="p">(</span><span class="n">rol</span><span class="p">(</span><span class="n">b</span><span class="p">,</span> <span class="n">dir</span><span class="p">)</span> <span class="o">&amp;</span> <span class="n">BOARD</span> <span class="o">&amp;</span> <span class="n">b</span><span class="p">,</span> <span class="n">dir</span><span class="p">)</span> <span class="o">&amp;</span> <span class="n">BOARD</span> <span class="o">&amp;</span> <span class="p">(</span><span class="o">~</span><span class="n">b</span><span class="p">);</span>
        <span class="kt">uint64_t</span> <span class="n">cmv</span> <span class="o">=</span> <span class="n">mv</span> <span class="o">&amp;</span> <span class="n">CORNERS</span><span class="p">;</span> <span class="c1">// find all moves into corners</span>
        <span class="kt">uint64_t</span> <span class="n">zmv</span> <span class="o">=</span> <span class="n">mv</span> <span class="o">&amp;</span> <span class="n">UINT64_C</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span> <span class="c1">// Move into the center is not good as well</span>

        <span class="c1">// also some fields in each direction should be avoided first. These typically</span>
        <span class="c1">// violate a so called Pagoda function</span>
        <span class="kt">uint64_t</span> <span class="n">dmv</span> <span class="o">=</span> <span class="n">UINT64_C</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">dir</span> <span class="o">==</span> <span class="n">DOWN</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">dmv</span> <span class="o">=</span> <span class="n">mv</span> <span class="o">&amp;</span> <span class="p">(</span><span class="n">UINT64_C</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="mi">9</span> <span class="o">|</span> <span class="n">UINT64_C</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="mi">53</span> <span class="o">|</span> <span class="n">UINT64_C</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="mi">62</span><span class="p">);</span>
        <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">dir</span> <span class="o">==</span> <span class="n">UP</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">dmv</span> <span class="o">=</span> <span class="n">mv</span> <span class="o">&amp;</span> <span class="p">(</span><span class="n">UINT64_C</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="mi">2</span> <span class="o">|</span> <span class="n">UINT64_C</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="mi">11</span> <span class="o">|</span> <span class="n">UINT64_C</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="mi">55</span><span class="p">);</span>
        <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">dir</span> <span class="o">==</span> <span class="n">LEFT</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">dmv</span> <span class="o">=</span> <span class="n">mv</span> <span class="o">&amp;</span> <span class="p">(</span><span class="n">UINT64_C</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="mi">44</span> <span class="o">|</span> <span class="n">UINT64_C</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="mi">53</span> <span class="o">|</span> <span class="n">UINT64_C</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="mi">55</span><span class="p">);</span>
        <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">dir</span> <span class="o">==</span> <span class="n">RIGHT</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">dmv</span> <span class="o">=</span> <span class="n">mv</span> <span class="o">&amp;</span> <span class="p">(</span><span class="n">UINT64_C</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="mi">9</span> <span class="o">|</span> <span class="n">UINT64_C</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="mi">11</span> <span class="o">|</span> <span class="n">UINT64_C</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="mi">20</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="c1">// Remove these moves from the initial move list and try them later,</span>
        <span class="c1">// since they are likely sub-optimal</span>
        <span class="kt">uint64_t</span> <span class="n">mvLater</span> <span class="o">=</span> <span class="n">cmv</span> <span class="o">|</span> <span class="n">zmv</span> <span class="o">|</span> <span class="n">dmv</span><span class="p">;</span>
        <span class="n">mv</span> <span class="o">^=</span> <span class="n">mvLater</span><span class="p">;</span>
        <span class="n">allmv</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">mv</span><span class="p">;</span>
        <span class="n">allmv</span><span class="p">[</span><span class="n">i</span> <span class="o">+</span> <span class="mi">4</span><span class="p">]</span> <span class="o">=</span> <span class="n">mvLater</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>


<span class="kt">int</span> <span class="nf">backtrack</span><span class="p">(</span><span class="kt">uint64_t</span> <span class="n">b</span><span class="p">);</span>

<span class="cm">/*
 * Try all moves coded in mv (contains the destination holes) for a board b in a direction dir. Return, if a terminal
 * position is reached.
 */</span>
<span class="kt">int</span> <span class="nf">tryMoves</span><span class="p">(</span><span class="kt">uint64_t</span> <span class="n">b</span><span class="p">,</span> <span class="kt">uint64_t</span> <span class="n">mv</span><span class="p">,</span> <span class="kt">int</span> <span class="n">dir</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">while</span> <span class="p">(</span><span class="n">mv</span> <span class="o">!=</span> <span class="n">ZERO</span><span class="p">)</span> <span class="p">{</span>
        <span class="kt">uint64_t</span> <span class="n">x</span> <span class="o">=</span> <span class="p">((</span><span class="n">mv</span> <span class="o">-</span> <span class="n">UINT64_C</span><span class="p">(</span><span class="mi">1</span><span class="p">))</span> <span class="o">^</span> <span class="n">mv</span><span class="p">)</span> <span class="o">&amp;</span> <span class="n">mv</span><span class="p">;</span>

        <span class="c1">// perform move</span>
        <span class="n">b</span> <span class="o">|=</span> <span class="n">x</span><span class="p">;</span> <span class="c1">// set peg at new position</span>
        <span class="n">b</span> <span class="o">&amp;=</span> <span class="o">~</span><span class="n">rol</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="o">-</span><span class="n">dir</span><span class="p">);</span> <span class="c1">// remove jumped-over peg</span>
        <span class="n">b</span> <span class="o">&amp;=</span> <span class="o">~</span><span class="n">rol</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="o">-</span><span class="mi">2</span> <span class="o">*</span> <span class="n">dir</span><span class="p">);</span> <span class="c1">// remove  peg from old position</span>

        <span class="c1">//recursion</span>
        <span class="kt">int</span> <span class="n">res</span> <span class="o">=</span> <span class="n">backtrack</span><span class="p">(</span><span class="n">b</span><span class="p">);</span>

        <span class="c1">// undo move</span>
        <span class="n">b</span> <span class="o">&amp;=</span> <span class="o">~</span><span class="n">x</span><span class="p">;</span> <span class="c1">// remove peg from new position again</span>
        <span class="n">b</span> <span class="o">|=</span> <span class="n">rol</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="o">-</span><span class="n">dir</span><span class="p">);</span> <span class="c1">// add jumped-over peg again</span>
        <span class="n">b</span> <span class="o">|=</span> <span class="n">rol</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="o">-</span><span class="mi">2</span> <span class="o">*</span> <span class="n">dir</span><span class="p">);</span> <span class="c1">// set peg to old position</span>

        <span class="c1">//printBoard(b);</span>
        <span class="n">mv</span> <span class="o">&amp;=</span> <span class="p">(</span><span class="n">mv</span> <span class="o">-</span> <span class="mi">1</span><span class="p">);</span> <span class="c1">// remove this move from the list</span>

        <span class="k">if</span> <span class="p">(</span><span class="n">res</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">res</span> <span class="o">&lt;=</span> <span class="n">TERM_CRITERION</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">printf</span><span class="p">(</span><span class="s">"Move: %d, %d"</span><span class="p">,</span> <span class="n">dir</span><span class="p">,</span> <span class="n">bitPos</span><span class="p">(</span><span class="n">x</span><span class="p">));</span>
            <span class="n">printBoard</span><span class="p">(</span><span class="n">b</span><span class="p">);</span>
            <span class="k">return</span> <span class="n">res</span><span class="p">;</span>
        <span class="p">}</span>

    <span class="p">}</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span> <span class="c1">// no solution found</span>
<span class="p">}</span>

<span class="cm">/*
 * Backtracking function to solve the board. It investigates all moves in the 4 possible directions. It randomly
 * selects the first direction to enforce different searching order in case the solver is started several times.
 * The possible moves for one position can be found very fast with only a dew bitwise operations.
 */</span>
<span class="kt">int</span> <span class="nf">backtrack</span><span class="p">(</span><span class="kt">uint64_t</span> <span class="n">b</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// first check transposition table for this particular position</span>
    <span class="kt">int</span> <span class="n">value</span> <span class="o">=</span> <span class="n">getTransposition</span><span class="p">(</span><span class="n">b</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">value</span> <span class="o">!=</span> <span class="n">HASHMISS</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">value</span><span class="p">;</span>

    <span class="c1">// will contain all possible moves later. Indexes 0-3 will contain the most promising moves in all 4 directions,</span>
    <span class="c1">// and indexes 4-7 will contain the less promising moves in all directions</span>
    <span class="k">const</span> <span class="kt">int</span> <span class="n">numTrys</span> <span class="o">=</span> <span class="mi">8</span><span class="p">;</span>
    <span class="kt">uint64_t</span> <span class="n">allmv</span><span class="p">[</span><span class="n">numTrys</span><span class="p">];</span>
    <span class="kt">int</span> <span class="n">dir</span><span class="p">;</span>

    <span class="c1">// Find all possible moves, sorted according to some characteristics</span>
    <span class="n">generateMoves</span><span class="p">(</span><span class="n">b</span><span class="p">,</span> <span class="n">allmv</span><span class="p">);</span>


    <span class="kt">uint64_t</span> <span class="n">mv</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">res</span><span class="p">,</span> <span class="n">nomv</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="c1">// Try all possible moves.</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">numTrys</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">mv</span> <span class="o">=</span> <span class="n">allmv</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
        <span class="n">dir</span> <span class="o">=</span> <span class="n">DIRECTIONS</span><span class="p">[</span><span class="n">i</span> <span class="o">&amp;</span> <span class="mi">3</span><span class="p">];</span> <span class="c1">// = i % 4</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">mv</span> <span class="o">!=</span> <span class="n">ZERO</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">res</span> <span class="o">=</span> <span class="n">tryMoves</span><span class="p">(</span><span class="n">b</span><span class="p">,</span> <span class="n">mv</span><span class="p">,</span> <span class="n">dir</span><span class="p">);</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">res</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">res</span> <span class="o">&lt;=</span> <span class="n">TERM_CRITERION</span><span class="p">)</span> <span class="p">{</span>
                <span class="c1">// Not neccessary to put position in transposition table</span>
                <span class="k">return</span> <span class="n">res</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span> <span class="k">else</span> <span class="c1">// if no moves in specific direction is possible</span>
            <span class="n">nomv</span><span class="o">++</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="kt">int</span> <span class="n">ret</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">nomv</span> <span class="o">==</span> <span class="n">numTrys</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// if no move in any direction was possible</span>
        <span class="n">ret</span> <span class="o">=</span> <span class="n">bitCount</span><span class="p">(</span><span class="n">b</span><span class="p">);</span> <span class="c1">// count number of pegs left</span>
    <span class="p">}</span>

    <span class="n">putTransposition</span><span class="p">(</span><span class="n">b</span><span class="p">,</span> <span class="n">ret</span><span class="p">);</span>
    <span class="k">return</span> <span class="n">ret</span><span class="p">;</span> <span class="c1">// no move could lead to a solution</span>

<span class="p">}</span>


<span class="cm">/*
 * Root-node of the solver. Initializes the board and all other necessary variables
 * and then starts an exhaustive search.
 */</span>
<span class="kt">void</span> <span class="nf">solve</span><span class="p">()</span> <span class="p">{</span>
    <span class="n">init</span><span class="p">();</span>

    <span class="c1">// initial board</span>
    <span class="kt">uint64_t</span> <span class="n">b</span> <span class="o">=</span> <span class="n">BOARD</span><span class="p">;</span>
    <span class="n">b</span> <span class="o">=</span> <span class="n">removePeg</span><span class="p">(</span><span class="n">b</span><span class="p">,</span> <span class="mi">57</span><span class="p">);</span> <span class="c1">// remove one peg</span>

    <span class="c1">// Start back-tracking</span>
    <span class="n">backtrack</span><span class="p">(</span><span class="n">b</span><span class="p">);</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">"Lets start solving the Diamond-41 peg solitaire problem..."</span><span class="p">);</span>
    <span class="n">fflush</span><span class="p">(</span><span class="n">stdout</span><span class="p">);</span>
    <span class="kt">time_t</span> <span class="n">start</span><span class="p">,</span> <span class="n">end</span><span class="p">;</span>
    <span class="kt">double</span> <span class="n">elapsed</span><span class="p">;</span>  <span class="c1">// seconds</span>
    <span class="n">start</span> <span class="o">=</span> <span class="n">time</span><span class="p">(</span><span class="nb">NULL</span><span class="p">);</span>
    <span class="n">solve</span><span class="p">();</span>
    <span class="n">end</span> <span class="o">=</span> <span class="n">time</span><span class="p">(</span><span class="nb">NULL</span><span class="p">);</span>
    <span class="n">elapsed</span> <span class="o">=</span> <span class="n">difftime</span><span class="p">(</span><span class="n">end</span><span class="p">,</span> <span class="n">start</span><span class="p">);</span>

    <span class="n">printf</span><span class="p">(</span><span class="s">"Time in minutes: %f</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">elapsed</span> <span class="o">/</span> <span class="mi">60</span><span class="p">.</span><span class="mi">0</span><span class="p">);</span>

    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>

<span class="cm">/* ****/</span></code></pre></figure> <h2 id="source-code-for-solving-the-english-peg-solitaire">Source Code for Solving the English Peg Solitaire</h2> <p>Save the following code in a file <code class="language-plaintext highlighter-rouge">solitaire-en.cpp</code> and compile with <code class="language-plaintext highlighter-rouge">g++ solitaire-en.cpp</code> and then run the binary file. I wrote this code a long time ago, when I started learning programming. So, you will find many redundant code segments and strange programming styles. Nevertheless, the solver works and delivers exactly the solution which is shown in the above slideshow.</p> <p>Interestingly, this naive implementation of the problem actually finds the solution very fast (on my computer in less than a second). Most likely, the solver has a good move order (just by chance) which leads to this fast solution. When changing the order of the moves, the solver can require several hours in order to find a correct solution.</p> <p><code class="language-plaintext highlighter-rouge">solitaire-en.cpp</code></p> <figure class="highlight"><pre><code class="language-c" data-lang="c"><span class="cp">#include</span> <span class="cpf">&lt;fstream&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span>
<span class="cm">/*Output-Path for the generated moves*/</span>
<span class="cp">#define PATH "moves.txt"
</span>
<span class="cm">/*
 * Structure of the board. It has a dimension of 9 x 9, to also allow to put a border
 * around the actual field.
 */</span>
<span class="kt">short</span> <span class="kt">int</span> <span class="n">field</span><span class="p">[</span><span class="mi">9</span><span class="p">][</span><span class="mi">9</span><span class="p">];</span>

<span class="cm">/*
* Tracks the smallest number of pegs left on the board
*/</span>
<span class="kt">short</span> <span class="kt">int</span> <span class="n">minimum</span> <span class="o">=</span> <span class="mi">99</span><span class="p">;</span>

<span class="cm">/*
* Keeps track of the current move sequence during the search
*/</span>
<span class="kt">short</span> <span class="kt">int</span> <span class="n">move</span><span class="p">[</span><span class="mi">31</span><span class="p">][</span><span class="mi">3</span><span class="p">];</span>

<span class="cm">/*
* Initializes the board with proper values.
*/</span>
<span class="kt">void</span> <span class="nf">initialize</span><span class="p">(</span><span class="kt">void</span><span class="p">);</span>

<span class="cm">/*
* The most important function of this program...
*/</span>
<span class="kt">void</span> <span class="nf">computation</span><span class="p">(</span><span class="kt">short</span> <span class="n">instance</span><span class="p">);</span>

<span class="cm">/*Counts the number of pegs on the board*/</span>
<span class="kt">short</span> <span class="kt">int</span> <span class="nf">CountStones</span><span class="p">(</span><span class="kt">void</span><span class="p">);</span>

<span class="cm">/*Writes a found solution to a file*/</span>
<span class="kt">void</span> <span class="nf">WriteToFile</span><span class="p">(</span><span class="kt">void</span><span class="p">);</span>


<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">argv</span><span class="p">[])</span> <span class="p">{</span>
    <span class="n">initialize</span><span class="p">();</span>   <span class="c1">// Prepare everyting</span>
    <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"The solution will be saved in moves.txt."</span><span class="p">;</span>
    <span class="n">computation</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span> <span class="c1">// Start exhaustive search</span>
    <span class="n">WriteToFile</span><span class="p">();</span>  <span class="c1">// Save solution</span>
    <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"I found a solution...."</span><span class="p">;</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">initialize</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="p">{</span>
    <span class="kt">short</span> <span class="kt">int</span> <span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">;</span>
    <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">9</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">field</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span> <span class="c1">// Top boundary of the board</span>
        <span class="n">field</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">8</span><span class="p">]</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span> <span class="c1">// Bottom boundary of the board</span>
        <span class="n">field</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span> <span class="c1">// Left boundary of the board</span>
        <span class="n">field</span><span class="p">[</span><span class="mi">8</span><span class="p">][</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span> <span class="c1">// Right boundary of the board</span>
    <span class="p">}</span>
    <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">8</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
        <span class="k">for</span> <span class="p">(</span><span class="n">j</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="mi">8</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span>
            <span class="n">field</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>

    <span class="cm">/* Fill the corners of the board with twos, since they don't have holes.*/</span>
    <span class="cm">/* Top left*/</span>
    <span class="n">field</span><span class="p">[</span><span class="mi">1</span><span class="p">][</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
    <span class="n">field</span><span class="p">[</span><span class="mi">2</span><span class="p">][</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
    <span class="n">field</span><span class="p">[</span><span class="mi">1</span><span class="p">][</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
    <span class="n">field</span><span class="p">[</span><span class="mi">2</span><span class="p">][</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>

    <span class="cm">/*To right*/</span>
    <span class="n">field</span><span class="p">[</span><span class="mi">6</span><span class="p">][</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
    <span class="n">field</span><span class="p">[</span><span class="mi">7</span><span class="p">][</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
    <span class="n">field</span><span class="p">[</span><span class="mi">6</span><span class="p">][</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
    <span class="n">field</span><span class="p">[</span><span class="mi">7</span><span class="p">][</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>

    <span class="cm">/*Bottom left*/</span>
    <span class="n">field</span><span class="p">[</span><span class="mi">1</span><span class="p">][</span><span class="mi">6</span><span class="p">]</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
    <span class="n">field</span><span class="p">[</span><span class="mi">2</span><span class="p">][</span><span class="mi">6</span><span class="p">]</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
    <span class="n">field</span><span class="p">[</span><span class="mi">1</span><span class="p">][</span><span class="mi">7</span><span class="p">]</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
    <span class="n">field</span><span class="p">[</span><span class="mi">2</span><span class="p">][</span><span class="mi">7</span><span class="p">]</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>

    <span class="cm">/*bottom right*/</span>
    <span class="n">field</span><span class="p">[</span><span class="mi">6</span><span class="p">][</span><span class="mi">6</span><span class="p">]</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
    <span class="n">field</span><span class="p">[</span><span class="mi">7</span><span class="p">][</span><span class="mi">6</span><span class="p">]</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
    <span class="n">field</span><span class="p">[</span><span class="mi">6</span><span class="p">][</span><span class="mi">7</span><span class="p">]</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
    <span class="n">field</span><span class="p">[</span><span class="mi">7</span><span class="p">][</span><span class="mi">7</span><span class="p">]</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>

    <span class="cm">/*The hole in the middle has to be empty*/</span>
    <span class="n">field</span><span class="p">[</span><span class="mi">4</span><span class="p">][</span><span class="mi">4</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

<span class="p">}</span>

<span class="cm">/*Recursive function for backtracking

1. Find a peg
2. Find neighboring peg and check if there is a hole one further
3. Peg jumps over the other one into the hole. The peg has to be moved by 2 places and the other peg has to
be removed. */</span>

<span class="kt">void</span> <span class="nf">computation</span><span class="p">(</span><span class="kt">short</span> <span class="n">instance</span><span class="p">)</span> <span class="p">{</span>
    <span class="kt">short</span> <span class="kt">int</span> <span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">;</span>              <span class="c1">// Loop variables</span>
    <span class="n">bool</span> <span class="n">NoPossibilities</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>  <span class="c1">// This variable tracks, if a move could be performed or not from the current position</span>
    <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">8</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>      <span class="c1">// Start with 1, since 0 is the boundary</span>
        <span class="k">for</span> <span class="p">(</span><span class="n">j</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="mi">8</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span>  <span class="c1">// The same here...</span>
        <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">field</span><span class="p">[</span><span class="n">j</span><span class="p">][</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span> <span class="c1">// If there is a peg in this hole...</span>
            <span class="p">{</span>
                <span class="k">if</span> <span class="p">(</span><span class="n">field</span><span class="p">[</span><span class="n">j</span> <span class="o">+</span> <span class="mi">1</span><span class="p">][</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span> <span class="c1">// If there is another peg on the right...</span>
                <span class="p">{</span>
                    <span class="k">if</span> <span class="p">(</span><span class="n">field</span><span class="p">[</span><span class="n">j</span> <span class="o">+</span> <span class="mi">2</span><span class="p">][</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="c1">// and if one further there is an empty hole</span>
                    <span class="p">{</span>
                        <span class="n">NoPossibilities</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>  <span class="c1">// Set to false, since we have an option for a move</span>
                        <span class="n">field</span><span class="p">[</span><span class="n">j</span><span class="p">][</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>         <span class="c1">// Remove peg from its original position</span>
                        <span class="n">field</span><span class="p">[</span><span class="n">j</span> <span class="o">+</span> <span class="mi">1</span><span class="p">][</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>       <span class="c1">// Remove the peg over which we jump</span>
                        <span class="n">field</span><span class="p">[</span><span class="n">j</span> <span class="o">+</span> <span class="mi">2</span><span class="p">][</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>       <span class="c1">// Put first peg into new hole</span>
                        <span class="n">move</span><span class="p">[</span><span class="n">instance</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="n">j</span><span class="p">;</span>   <span class="c1">// Save old x-position of peg</span>
                        <span class="n">move</span><span class="p">[</span><span class="n">instance</span><span class="p">][</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">i</span><span class="p">;</span>   <span class="c1">// Save old y-position of peg</span>
                        <span class="n">move</span><span class="p">[</span><span class="n">instance</span><span class="p">][</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="mi">20</span><span class="p">;</span>  <span class="c1">// Save direction of the move (20, for right)</span>
                        <span class="n">computation</span><span class="p">(</span><span class="n">instance</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span> <span class="c1">// recursion step</span>
                        <span class="k">if</span> <span class="p">(</span><span class="n">minimum</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span>           <span class="c1">// In case a solution was found, stop the search</span>
                            <span class="k">break</span><span class="p">;</span>               <span class="c1">// stop here...</span>
                        <span class="n">field</span><span class="p">[</span><span class="n">j</span><span class="p">][</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>           <span class="c1">// Undo move...</span>
                        <span class="n">field</span><span class="p">[</span><span class="n">j</span> <span class="o">+</span> <span class="mi">1</span><span class="p">][</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
                        <span class="n">field</span><span class="p">[</span><span class="n">j</span> <span class="o">+</span> <span class="mi">2</span><span class="p">][</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
                    <span class="p">}</span>
                <span class="p">}</span>
                <span class="k">if</span> <span class="p">(</span><span class="n">field</span><span class="p">[</span><span class="n">j</span> <span class="o">-</span> <span class="mi">1</span><span class="p">][</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span> <span class="c1">// If there is another peg on the left...</span>
                <span class="p">{</span>
                    <span class="cm">/* almost same as above */</span>
                    <span class="k">if</span> <span class="p">(</span><span class="n">field</span><span class="p">[</span><span class="n">j</span> <span class="o">-</span> <span class="mi">2</span><span class="p">][</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
                        <span class="n">NoPossibilities</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
                        <span class="n">field</span><span class="p">[</span><span class="n">j</span><span class="p">][</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
                        <span class="n">field</span><span class="p">[</span><span class="n">j</span> <span class="o">-</span> <span class="mi">1</span><span class="p">][</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
                        <span class="n">field</span><span class="p">[</span><span class="n">j</span> <span class="o">-</span> <span class="mi">2</span><span class="p">][</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
                        <span class="n">move</span><span class="p">[</span><span class="n">instance</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="n">j</span><span class="p">;</span>
                        <span class="n">move</span><span class="p">[</span><span class="n">instance</span><span class="p">][</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">i</span><span class="p">;</span>
                        <span class="n">move</span><span class="p">[</span><span class="n">instance</span><span class="p">][</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="o">-</span><span class="mi">20</span><span class="p">;</span>
                        <span class="n">computation</span><span class="p">(</span><span class="n">instance</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
                        <span class="k">if</span> <span class="p">(</span><span class="n">minimum</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span>
                            <span class="k">break</span><span class="p">;</span>
                        <span class="n">field</span><span class="p">[</span><span class="n">j</span><span class="p">][</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
                        <span class="n">field</span><span class="p">[</span><span class="n">j</span> <span class="o">-</span> <span class="mi">1</span><span class="p">][</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
                        <span class="n">field</span><span class="p">[</span><span class="n">j</span> <span class="o">-</span> <span class="mi">2</span><span class="p">][</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
                    <span class="p">}</span>
                <span class="p">}</span>
                <span class="k">if</span> <span class="p">(</span><span class="n">field</span><span class="p">[</span><span class="n">j</span><span class="p">][</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span> <span class="c1">// If there is another peg below ...</span>
                <span class="p">{</span>
                    <span class="cm">/* almost same as above */</span>
                    <span class="k">if</span> <span class="p">(</span><span class="n">field</span><span class="p">[</span><span class="n">j</span><span class="p">][</span><span class="n">i</span> <span class="o">+</span> <span class="mi">2</span><span class="p">]</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
                        <span class="n">NoPossibilities</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
                        <span class="n">field</span><span class="p">[</span><span class="n">j</span><span class="p">][</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
                        <span class="n">field</span><span class="p">[</span><span class="n">j</span><span class="p">][</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
                        <span class="n">field</span><span class="p">[</span><span class="n">j</span><span class="p">][</span><span class="n">i</span> <span class="o">+</span> <span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
                        <span class="n">move</span><span class="p">[</span><span class="n">instance</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="n">j</span><span class="p">;</span>
                        <span class="n">move</span><span class="p">[</span><span class="n">instance</span><span class="p">][</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">i</span><span class="p">;</span>
                        <span class="n">move</span><span class="p">[</span><span class="n">instance</span><span class="p">][</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
                        <span class="n">computation</span><span class="p">(</span><span class="n">instance</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
                        <span class="k">if</span> <span class="p">(</span><span class="n">minimum</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span>
                            <span class="k">break</span><span class="p">;</span>
                        <span class="n">field</span><span class="p">[</span><span class="n">j</span><span class="p">][</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
                        <span class="n">field</span><span class="p">[</span><span class="n">j</span><span class="p">][</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
                        <span class="n">field</span><span class="p">[</span><span class="n">j</span><span class="p">][</span><span class="n">i</span> <span class="o">+</span> <span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
                    <span class="p">}</span>
                <span class="p">}</span>
                <span class="k">if</span> <span class="p">(</span><span class="n">field</span><span class="p">[</span><span class="n">j</span><span class="p">][</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span> <span class="c1">// If there is another peg above ...</span>
                <span class="p">{</span>
                    <span class="cm">/* almost same as above */</span>
                    <span class="k">if</span> <span class="p">(</span><span class="n">field</span><span class="p">[</span><span class="n">j</span><span class="p">][</span><span class="n">i</span> <span class="o">-</span> <span class="mi">2</span><span class="p">]</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
                        <span class="n">NoPossibilities</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
                        <span class="n">field</span><span class="p">[</span><span class="n">j</span><span class="p">][</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
                        <span class="n">field</span><span class="p">[</span><span class="n">j</span><span class="p">][</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
                        <span class="n">field</span><span class="p">[</span><span class="n">j</span><span class="p">][</span><span class="n">i</span> <span class="o">-</span> <span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
                        <span class="n">move</span><span class="p">[</span><span class="n">instance</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="n">j</span><span class="p">;</span>
                        <span class="n">move</span><span class="p">[</span><span class="n">instance</span><span class="p">][</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">i</span><span class="p">;</span>
                        <span class="n">move</span><span class="p">[</span><span class="n">instance</span><span class="p">][</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="o">-</span><span class="mi">2</span><span class="p">;</span>
                        <span class="n">computation</span><span class="p">(</span><span class="n">instance</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
                        <span class="k">if</span> <span class="p">(</span><span class="n">minimum</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span>
                            <span class="k">break</span><span class="p">;</span>
                        <span class="n">field</span><span class="p">[</span><span class="n">j</span><span class="p">][</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
                        <span class="n">field</span><span class="p">[</span><span class="n">j</span><span class="p">][</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
                        <span class="n">field</span><span class="p">[</span><span class="n">j</span><span class="p">][</span><span class="n">i</span> <span class="o">-</span> <span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
                    <span class="p">}</span>
                <span class="p">}</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">NoPossibilities</span><span class="p">)</span> <span class="c1">// If no move could be performed...</span>
    <span class="p">{</span>
        <span class="kt">short</span> <span class="kt">int</span> <span class="n">count</span><span class="p">;</span>
        <span class="n">count</span> <span class="o">=</span> <span class="n">CountStones</span><span class="p">();</span>  <span class="c1">// Count remaining pegs</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">count</span> <span class="o">==</span> <span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="n">field</span><span class="p">[</span><span class="mi">4</span><span class="p">][</span><span class="mi">4</span><span class="p">]</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span> <span class="c1">// In case only one peg is left in the center</span>
            <span class="n">minimum</span> <span class="o">=</span> <span class="n">count</span><span class="p">;</span>    <span class="c1">// set minimum = 1, which stops the search</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="cm">/*
* Counts the number of pegs on the board
*/</span>
<span class="kt">short</span> <span class="kt">int</span> <span class="nf">CountStones</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="p">{</span>
    <span class="kt">short</span> <span class="kt">int</span> <span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">,</span> <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">8</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>      <span class="c1">// Starts with 1, since 0 is the boarndary</span>
        <span class="k">for</span> <span class="p">(</span><span class="n">j</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="mi">8</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span>  <span class="c1">// same here....</span>
        <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">field</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span> <span class="c1">// In case there is a peg at this position</span>
                <span class="n">count</span><span class="o">++</span><span class="p">;</span>       <span class="c1">// increase counter</span>
        <span class="p">}</span>
    <span class="k">return</span> <span class="n">count</span><span class="p">;</span>
<span class="p">}</span>

<span class="cm">/*
* Write solution to file....
*/</span>
<span class="kt">void</span> <span class="nf">WriteToFile</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">std</span><span class="o">::</span><span class="n">ofstream</span> <span class="n">file</span><span class="p">;</span>
    <span class="kt">short</span> <span class="kt">int</span> <span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">;</span>
    <span class="n">file</span><span class="p">.</span><span class="n">open</span><span class="p">(</span><span class="n">PATH</span><span class="p">);</span>  <span class="c1">// Create file specified above</span>
    <span class="n">file</span> <span class="o">&lt;&lt;</span> <span class="s">"Explanation: Every move consists of three values.</span><span class="se">\n</span><span class="s">"</span><span class="p">;</span>
    <span class="n">file</span> <span class="o">&lt;&lt;</span> <span class="s">"1. X-Position of the peg</span><span class="se">\n</span><span class="s">"</span><span class="p">;</span>
    <span class="n">file</span> <span class="o">&lt;&lt;</span> <span class="s">"2. Y-Position of the peg</span><span class="se">\n</span><span class="s">"</span><span class="p">;</span>
    <span class="n">file</span> <span class="o">&lt;&lt;</span> <span class="s">"3. Direction, in which the selected peg jumps</span><span class="se">\n</span><span class="s">"</span><span class="p">;</span>
    <span class="n">file</span> <span class="o">&lt;&lt;</span> <span class="s">"(20-&gt;right, -20 left, 2 down, -2 up)</span><span class="se">\n\n</span><span class="s">"</span><span class="p">;</span>
    <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">31</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">for</span> <span class="p">(</span><span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="mi">3</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span>
            <span class="n">file</span> <span class="o">&lt;&lt;</span> <span class="n">move</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="sc">'\n'</span><span class="p">;</span>
        <span class="n">file</span> <span class="o">&lt;&lt;</span> <span class="sc">'\n'</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="n">file</span><span class="p">.</span><span class="n">close</span><span class="p">();</span>
<span class="p">}</span></code></pre></figure>]]></content><author><name></name></author><category term="boardgames"/><category term="games"/><category term="solver"/><category term="C"/><category term="peg"/><category term="solitaire"/><category term="code"/><summary type="html"><![CDATA[Many of us might now the board game peg solitaire and might even have one of its many variants at home. Peg solitaire is a one-player game played on a board with n holes and n - 1 pegs. The number of holes depends on the board variant. For example, the English variant consists of 33 holes while the typical diamond variant consists of 41 holes. The rules of the game are rather easy.]]></summary></entry><entry><title type="html">Choosing a Voltage Divider Resistor for a Light Dependent Resistor</title><link href="https://markusthill.github.io/blog/2024/voltage-divider/" rel="alternate" type="text/html" title="Choosing a Voltage Divider Resistor for a Light Dependent Resistor"/><published>2024-03-31T00:20:00+00:00</published><updated>2024-03-31T00:20:00+00:00</updated><id>https://markusthill.github.io/blog/2024/voltage-divider</id><content type="html" xml:base="https://markusthill.github.io/blog/2024/voltage-divider/"><![CDATA[<p>Imagine that you are planning to use a Light Dependent Resistor (LDR) for your new IoT prototype in order to detect whether or not a lamp is turned on in a (otherwise dark) room. A common way to solve this problem is the usage of a voltage divider circuit in the following form:</p> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/2024-03-31-choosing-a-voltage-divider-resistor-for-a-ldr/VoltageDivider1-480.webp 480w,/assets/img/2024-03-31-choosing-a-voltage-divider-resistor-for-a-ldr/VoltageDivider1-800.webp 800w,/assets/img/2024-03-31-choosing-a-voltage-divider-resistor-for-a-ldr/VoltageDivider1-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/2024-03-31-choosing-a-voltage-divider-resistor-for-a-ldr/VoltageDivider1.png" class="img-fluid rounded z-depth-1 imgcenter" width="auto" height="auto" data-zoomable="" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> <figcaption class="caption"> <b>Figure 1:</b> Voltage divider circuit with a LDR and a resistor. </figcaption> </figure> <p>In this blog post, we will discuss how to choose the voltage divider’s resistances appropriately. </p> <p>In the above diagram, the LDR is denoted as \(R^*\), and \(R\) is another resistance required to divide the compliance voltage \(U_0\). Depending on the light that falls onto the LDR, the resistance of \(R^*\) and the voltage \(U\) change. The voltage \(U\) can be converted into a discrete value using an Analog-to-Digital-Converter (ADC), and the retrieved value can then be evaluated in a micro-controller (μC) program to determine the current lighting conditions in the room. In the above diagram, if the light is very bright, \(U\) would be large (close to \(U_0\)). If no light falls onto the LDR (in a dark room), the voltage \(U\) will tend towards small values. If you want to achieve the opposite behavior (small value of \(U\) for bright light), you can swap the resistor \(R\) with the LDR. This is illustrated in the figure below:</p> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/2024-03-31-choosing-a-voltage-divider-resistor-for-a-ldr/VoltageDivider2-480.webp 480w,/assets/img/2024-03-31-choosing-a-voltage-divider-resistor-for-a-ldr/VoltageDivider2-800.webp 800w,/assets/img/2024-03-31-choosing-a-voltage-divider-resistor-for-a-ldr/VoltageDivider2-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/2024-03-31-choosing-a-voltage-divider-resistor-for-a-ldr/VoltageDivider2.png" class="img-fluid rounded z-depth-1 imgcenter" width="auto" height="auto" data-zoomable="" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> <figcaption class="caption"> <b>Figure 2:</b> Same as Fig. 1, however, in this diagram the LDR was swapped with the resistor. </figcaption> </figure> <p>However, there is one major problem when using a voltage divider: Typically, one would like \(U\) to cover a wide range of values, ideally between 0V and \(U_0\) (\(U \in [0V, U_0]\)), independently of the range of \(R^*\). This is, for example, important when ADCs are used since an ADC only has a limited resolution. If \(U\) only changes in a small range for different lighting conditions, then we do not have a sufficient signal-to-noise ratio, and it will become very difficult to distinguish bright from dark. Let us assume, for example, that in our configuration (first diagram, with \(U_0\) = 5V), the voltage \(U\) varies between 3.5V (very dark) and 4.5V (very bright). If we are now using an 8-bit ADC (assuming that the reference voltage of the ADC is also \(U_0\)), we have a voltage resolution of \(5V/256\), which is approx. \(0.02V\). But since the input voltage only moves around in the interval \([3.5V, 4.5V]\), the ADC will only generate an interval of about \(1V/0.02V=50\) distinguishable values, although 256 would be theoretically possible. Taking slightly changing lighting conditions and other noise sources into account, this interval containing 50 discrete values is rather small. It will most likely lead to false assertions about the state of the lamp (on/off) in the room. Even if we use high-resolution ADCs in this configuration, we will run into problems if we have significant noise in \(U\). Hence, we should ensure that the interval of values \(U\) covers is as large as possible to maximize the signal-to-noise ratio.</p> <p>The good news is that we can maximize the range of \(U\) by selecting \(R\) appropriately if we know our extreme values (e.g., for dark and bright) of \(R^*\). The bad news is: If the ratio between these extreme values – which are given by the physical constraints of the LDR (or some other component) and its environment and which cannot be chosen by us – is too small, then we again run into the problem that \(U\) will only cover a small interval. For this reason, you should ensure that the varying resistor (LDR, force-sensitive resistor, etc.) you use has a high ratio between the extreme values for those conditions you want to distinguish.</p> <h2 id="step-by-step-guide">Step-by-step guide</h2> <ol> <li>Based on the previous remarks, you should follow these steps for the setup of a suitable voltage divider:</li> <li>Select a varying resistance (e.g., LDR) suitable for your task</li> <li>Choose either of the above circuit diagrams (whichever suits your needs)</li> <li>Measure the minimum and maximum values for R^* for the extreme conditions of your environment</li> <li>Compute the ratio \(R^*_{max} / R^*_{min}\) for the extreme values of \(R^*\). If the ratio is too small, return to 1. and find another component. If you are unsure if your ratio is fine, you can continue with the following steps and conduct some experiments afterward.</li> <li>Choose \(R=\sqrt{R^*_{min} \cdot R^*_{max}}\). This guarantees that you cover the largest interval for \(U\) (if you are interested in why, you can continue reading the following section).</li> <li>Build your circuit and test your setup to ensure that it is sufficiently robust. If you encounter problems, you either have to start with step one again or experiment with more advanced algorithmic approaches (outside the scope of this article).</li> </ol> <p>If you realize that the minimum value of \(R^*\) is close to 0Ω (which is rarely the case), then you should be doing fine with a value of R between 500Ω and 1000Ω. If possible, you should ensure that \(R^*_{min}+R &gt; 500 \Omega\), to avoid too large currents.</p> <h2 id="maximizing-the-voltage-margin-for-a-voltage-divider">Maximizing the Voltage Margin for a Voltage Divider</h2> <p>We assume that both \(R^*_{max}\) and \(R^*_{min}\) are known. \(U_0\) is typically also known in advance. However, we will see that it does not play a role in calculating \(R\). For a certain resistance \(R^* \in [R^*_{min}, R^*_{max}]\) we know that (following Fig. 1):</p> \[\begin{align} U(R)=U_0 \frac{R}{R^* + R} \end{align}\] <p>Since we wish to maximize the voltage margin for \(U\), we introduce a new quantity \(\Delta U\), which is simply the difference of the voltage \(U\) for the extreme values of \(R^*\):</p> \[\begin{align*} \Delta U(R) &amp;= U_{max}(R) - U_{min}(R) \\ &amp;= U_0 \frac{R}{R^*_{min} + R} - U_0 \frac{R}{R^*_{max} + R} \\ &amp;= U_0 \Bigg[\frac{R}{R^*_{min} + R} - \frac{R}{R^*_{max} + R} \Bigg] \\ &amp;= U_0 \Bigg[\frac{R(R^*_{max} + R) - R(R^*_{min} + R)}{(R^*_{min} + R)(R^*_{max} + R)} \Bigg] \\ &amp;= U_0 \Bigg[\frac{R(R^*_{max} - R^*_{min})}{(R^*_{min} + R)(R^*_{max} + R)} \Bigg] \\ \end{align*}\] <p>In order to maximize above function \(\Delta U(R)\) we first compute the derivative \(\frac{\partial}{\partial R} \Delta U\):</p> \[\begin{align*} \frac{\partial}{\partial R} \Delta U &amp;= U_0\Bigg[\frac{(R^*_{max} - R^*_{min})(R^*_{min} + R)(R^*_{max} + R)-(R^*_{max} - R^*_{min})(R^*_{min} + R^*_{max} + 2R)}{(R^*_{min} + R)^2(R^*_{max} + R)^2}\Bigg] \\ &amp;= U_0\Bigg[\frac{(R^*_{min} - R^*_{max})\big[R(R^*_{min} + R^*_{max} + 2R)- (R^*_{min} + R)(R^*_{max} + R)\big]}{(R^*_{min} + R)^2(R^*_{max} + R)^2}\Bigg] \\ &amp;= U_0\Bigg[\frac{(R^*_{min} - R^*_{max})\big[2R^2-R^*_{min}R^*_{max} - R^2\big]}{(R^*_{min} + R)^2(R^*_{max} + R)^2}\Bigg] \\ &amp;= U_0\Bigg[\frac{(R^*_{min} - R^*_{max})\big[R^2-R^*_{min}R^*_{max}\big]}{(R^*_{min} + R)^2(R^*_{max} + R)^2}\Bigg] \end{align*}\] <p>Then, we solve \(\frac{\partial \Delta U}{\partial R} = 0\), in order to detect the extrema of the function:</p> \[\begin{align*} 0 &amp;= \frac{\partial}{\partial R}\Delta U \\ 0 &amp;= U_0\Bigg[\frac{(R^*_{min} - R^*_{max})\big[R^2-R^*_{min}R^*_{max}\big]}{(R^*_{min} + R)^2(R^*_{max} + R)^2}\Bigg] \\ 0 &amp;= (R^*_{min} - R^*_{max})\big[R^2-R^*_{min}R^*_{max}\big] \\ \end{align*}\] <p>And, since we assume that \(R^*_{max}\) is strictly larger than \(R^*_{min}\), hence \(R^*_{max} &gt; R^*_{min}\), we finally get:</p> \[\begin{align*} 0 &amp;= R^2-R^*_{min}R^*_{max}\\ R^2 &amp;= R^*_{min}R^*_{max} \\ R &amp;= \sqrt{R^*_{min}R^*_{max}} \\ \end{align*}\] <p>It is easy to see that above solution for \(R\) maximizes the voltage margin.</p> <h2 id="example">Example</h2> <p>In the figure below we show the behaviour of the voltage margin for different min-max value pairs of \(R^*\).</p> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/2024-03-31-choosing-a-voltage-divider-resistor-for-a-ldr/VoltageDivider-480.webp 480w,/assets/img/2024-03-31-choosing-a-voltage-divider-resistor-for-a-ldr/VoltageDivider-800.webp 800w,/assets/img/2024-03-31-choosing-a-voltage-divider-resistor-for-a-ldr/VoltageDivider-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/2024-03-31-choosing-a-voltage-divider-resistor-for-a-ldr/VoltageDivider.png" class="img-fluid rounded z-depth-1 imgcenter" width="80%" height="auto" data-zoomable="" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> <figcaption class="caption"> <b>Figure 3:</b> Plot showing curves for different min-max value pairs of \(R^*\). The values for \(R\) are plotted along the abscissa and the voltage margin \(\Delta U\) (in this case expressed in \(\%\) of the compliance voltage \(U_0\)). The curve labels in the parentheses indicate \(R^*_{min}\) and \(R^*_{max}\), respectively. The crossed circles indicate those points, where the voltage margin reaches its largest value. </figcaption> </figure> <p>As we can see from the diagram, for \(R^*_{min}=2k\Omega\) and \(R^*_{max}=10k\Omega\), we can – in the best case – achieve a voltage margin that covers about 38% of the original range of \(U_0\). If we read off the corresponding value of \(R\) from the abscissa, we have approx. \(R=5k\Omega\). The true value is \(R=\sqrt{2k\Omega \cdot 10k\Omega}\approx 4.5k\Omega\).</p> <p>As we mentioned before, not the difference \(R^*_{max} - R^*_{min}\) is important for the max. voltage margin, but rather the ratio \(R^*_{max}/R^*_{min}\). For example, the value pair \((R^*_{min}, R^*_{max})= (10k\Omega, 20k\Omega)\) has a larger difference \(R^*_{max}-R^*_{min}\) than \((R^*_{min}, R^*_{max})= (2k\Omega, 10k\Omega)\), however, the max. voltage margin is significantly lower for \((10k\Omega, 20k\Omega)\). If we have \((R^*_{min}, R^*_{max})= (20k\Omega, 100k\Omega)\), then the max. voltage margin we can achieve is exactly the same as for \((R^*_{min}, R^*_{max})= (2k\Omega, 10k\Omega)\), since the min-max ratio is equivalent, although both curves differ. In practice, one prefers the setting \((20k\Omega, 100k\Omega)\), because it is not as steep.</p> <p>To increase the voltage margin, we must find a setting that allows for a higher min-max ratio of \(R^*\). We can see in the figure that if we, for example, double \(R^*_{max}\) for \((R^*_{min}, R^*_{max})= (2k\Omega, 10k\Omega)\), \(\Delta U\) increases by approximately 15%. Nevertheless, only about 53% of the original range of \(U_0\) is covered in this case.</p> <p>In practice, if one has to find the closest suitable resistor for \(R\), moving towards slightly larger values is usually better. This is because the slope of the voltage margin curve (as seen in the above figure) is not as high when we leave the optimum towards higher values as if we would move towards smaller ones.</p> <p>The R-Code for generating the above figure is listed in the Jupyter notebook below. You can also exceute the notebook yourself:</p> <style>.jupyter-child-ext{width:112%;position:relative;left:calc(-10%)}</style> <div class="jupyter-child-ext"> <div class="jupyter-notebook" style="position: relative; width: 100%; margin: 0 auto;"> <div class="jupyter-notebook-iframe-container"> <iframe src="/assets/jupyter/MarkusThill.github.io-jupyter/2024_03_31_voltage_divider.ipynb.html" style="position: absolute; top: 0; left: 0; border-style: none;" width="100%" height="100%" onload="this.parentElement.style.paddingBottom = (this.contentWindow.document.documentElement.scrollHeight + 10) + 'px'"></iframe> </div> </div> </div>]]></content><author><name></name></author><category term="electronics"/><category term="voltage"/><category term="divider"/><category term="electronics"/><summary type="html"><![CDATA[Imagine that you are planning to use a Light Dependent Resistor (LDR) for your new IoT prototype in order to detect whether or not a lamp is turned on in a (otherwise dark) room. A common way to solve this problem is the usage of a voltage divider circuit.]]></summary></entry><entry><title type="html">Deriving a Closed-Form Solution of the Fibonacci Sequence</title><link href="https://markusthill.github.io/blog/2024/fibonacci-closed/" rel="alternate" type="text/html" title="Deriving a Closed-Form Solution of the Fibonacci Sequence"/><published>2024-03-29T00:20:00+00:00</published><updated>2024-03-29T00:20:00+00:00</updated><id>https://markusthill.github.io/blog/2024/fibonacci-closed</id><content type="html" xml:base="https://markusthill.github.io/blog/2024/fibonacci-closed/"><![CDATA[<p>The Fibonacci sequence might be one of the most famous sequences in the field of mathematics and computer science. High school students starting with programming classes already compute the first few Fibonacci numbers with their programs using different iterative or recursive approaches. One reason for its popularity might be that the Fibonacci sequence is closely related to many other fields of math and physics, often in astonishing ways that one might not expect. Usually, the Fibonacci sequence is defined recursively. Hence, to compute the n-th Fibonacci number, all previous Fibonacci numbers must be calculated first. In this blog post, we will derive an intriguing closed-form solution to directly compute any arbitrary Fibonacci number without first obtaining its predecessors. Interestingly, we will solve this problem with the help of a tool – the so called Z-Transform – which is actually more common in the field of digital signal processing.</p> <p>The Fibonacci sequence, starting with</p> \[F_0 = 0, \, F_1=1\] <p>can be defined recursively as</p> \[\begin{align} F_n = F_{n-1} + F_{n-2}, \, \, \mbox{for} \, n \in \mathbb{N}_{&gt;1}. \label{eq:fibo} \end{align}\] <p>A simple recursive function in R, implementing the sequence could look like this:</p> <div class="language-R highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">fibo</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="k">function</span><span class="p">(</span><span class="n">n</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="k">if</span><span class="p">(</span><span class="n">n</span><span class="o">&lt;</span><span class="m">0</span><span class="p">)</span><span class="w"> </span><span class="n">return</span><span class="w"> </span><span class="p">(</span><span class="kc">NaN</span><span class="p">);</span><span class="w">
</span><span class="k">if</span><span class="p">(</span><span class="n">n</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="m">0</span><span class="w"> </span><span class="p">)</span><span class="w"> </span><span class="n">return</span><span class="w"> </span><span class="p">(</span><span class="m">0</span><span class="p">);</span><span class="w">
</span><span class="k">if</span><span class="p">(</span><span class="n">n</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="m">1</span><span class="p">)</span><span class="w"> </span><span class="n">return</span><span class="w"> </span><span class="p">(</span><span class="m">1</span><span class="p">);</span><span class="w">
</span><span class="n">return</span><span class="w"> </span><span class="p">(</span><span class="n">fibo</span><span class="p">(</span><span class="n">n</span><span class="m">-1</span><span class="p">)</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">fibo</span><span class="p">(</span><span class="n">n</span><span class="m">-2</span><span class="p">));</span><span class="w">
</span><span class="p">}</span><span class="w">

</span><span class="n">sapply</span><span class="p">(</span><span class="m">0</span><span class="o">:</span><span class="m">19</span><span class="p">,</span><span class="w"> </span><span class="n">fibo</span><span class="p">)</span><span class="w">
</span></code></pre></div></div> <p>The first 20 elements \(F_0 \ldots F_{19}\) of the Fibonacci Sequence are thus:</p> \[\begin{align} 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181. \end{align}\] <p>Surprisingly (maybe not really, if you think about it), the Fibonacci sequence can also be generated using an IIR (infinite impulse response) filter. Consider the difference equation of an IIR-filter in the form:</p> \[\begin{align} y[n]=y[n-1]+y[n-2]+x[n-1]. \end{align}\] <p>The impuls response of this filter is defined as:</p> \[\begin{align} h[n]=h[n-1]+h[n-2]+\delta[n-1], \end{align}\] <p>where \(\delta[n]\) is the Kronecker Delta-Function. So at the time \(n=1\), we give a single impulse into our system and it starts running and computing a sequence of numbers. We get:</p> \[\begin{align} h[0]=0 \\ h[1]=1 \\ h[2]=1\\ h[3]=2\\ \vdots \end{align}\] <p>Now, let us compute the impulse response for the given filter with some code and plot the results. Since the filter coefficients usually have to be passed differently to most functions of the DSP toolboxes, which requires reading off the coefficients from the transfer function \(H(z)\), let us first compute the transfer function (the Z-transform of our filter in the time domain):</p> \[\begin{align} y[n]=y[n-1]+y[n-2]+x[n-1] \\ \mathcal{Z} \{ y[n] \} = \mathcal{Z} \{ y[n-1] \} + \mathcal{Z} \{ y[n-2] \} + \mathcal{Z} \{ x[n-1] \}\\ Y(z) = z^{-2}Y(z) + z^{-1}Y(z) + z^{-1}X(z) \\ Y(z) - z^{-1}Y(z) - z^{-2}Y(z) = z^{-1}X(z) \\ Y(z) \big(1- z^{-1} - z^{-2} \big) = z^{-1}X(z)\\ H(z)=\frac{Y(z)}{X(z)} = \frac{z^{-1}}{1- z^{-1} - z^{-2}} \label{eq:z-transform} \end{align}\] <p>Now, we can read off the filter coefficients (from the numerator for the forward coefficients and the denominator for the reverse coefficients). Hence, the forward coefficients are</p> \[\begin{align} b = [0, 1] \end{align}\] <p>and the reverse coefficients are</p> \[\begin{align} a = [1,-1,-1]. \end{align}\] <p>Subsequently, we can compute and plot the impulse response of our system.</p> <div class="language-R highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">library</span><span class="p">(</span><span class="n">signal</span><span class="p">)</span><span class="w">
</span><span class="n">library</span><span class="p">(</span><span class="n">ggplot2</span><span class="p">)</span><span class="w">
</span><span class="n">b</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="m">1</span><span class="p">)</span><span class="w">
</span><span class="n">a</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="m">1</span><span class="p">,</span><span class="m">-1</span><span class="p">,</span><span class="m">-1</span><span class="p">)</span><span class="w">
</span><span class="n">h</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">impz</span><span class="p">(</span><span class="n">filt</span><span class="o">=</span><span class="n">b</span><span class="p">,</span><span class="n">a</span><span class="o">=</span><span class="n">a</span><span class="p">,</span><span class="w"> </span><span class="n">n</span><span class="o">=</span><span class="m">10</span><span class="p">)</span><span class="o">$</span><span class="n">x</span><span class="w"> </span><span class="c1"># compute impulse response for our Filter</span><span class="w">

</span><span class="c1"># Plot the impulse response</span><span class="w">

</span><span class="n">df</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">data.frame</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="n">h</span><span class="o">$</span><span class="n">t</span><span class="p">,</span><span class="w"> </span><span class="n">y</span><span class="o">=</span><span class="n">h</span><span class="o">$</span><span class="n">x</span><span class="p">)</span><span class="w">
</span><span class="n">p</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">ggplot</span><span class="p">(</span><span class="n">data</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">df</span><span class="p">,</span><span class="w"> </span><span class="n">aes</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="n">x</span><span class="p">,</span><span class="w"> </span><span class="n">y</span><span class="o">=</span><span class="n">y</span><span class="p">))</span><span class="w"> </span><span class="o">+</span><span class="w">
</span><span class="n">geom_segment</span><span class="p">(</span><span class="w"> </span><span class="n">aes</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="n">x</span><span class="p">,</span><span class="w"> </span><span class="n">xend</span><span class="o">=</span><span class="n">x</span><span class="p">,</span><span class="w"> </span><span class="n">y</span><span class="o">=</span><span class="m">0</span><span class="p">,</span><span class="w"> </span><span class="n">yend</span><span class="o">=</span><span class="n">y</span><span class="p">),</span><span class="w"> </span><span class="n">color</span><span class="o">=</span><span class="s2">"darkgrey"</span><span class="p">,</span><span class="w"> </span><span class="n">size</span><span class="o">=</span><span class="m">1</span><span class="p">)</span><span class="w"> </span><span class="o">+</span><span class="w">
</span><span class="n">geom_point</span><span class="p">(</span><span class="n">size</span><span class="o">=</span><span class="m">4</span><span class="p">,</span><span class="w"> </span><span class="n">shape</span><span class="o">=</span><span class="m">21</span><span class="p">,</span><span class="w"> </span><span class="n">fill</span><span class="o">=</span><span class="s2">"orange"</span><span class="p">)</span><span class="w"> </span><span class="o">+</span><span class="w">
</span><span class="n">geom_text</span><span class="p">(</span><span class="n">aes</span><span class="p">(</span><span class="n">label</span><span class="o">=</span><span class="n">y</span><span class="p">),</span><span class="n">hjust</span><span class="o">=</span><span class="m">0</span><span class="p">,</span><span class="w"> </span><span class="n">vjust</span><span class="o">=</span><span class="m">-.7</span><span class="p">)</span><span class="w"> </span><span class="o">+</span><span class="w">
</span><span class="n">theme_light</span><span class="p">(</span><span class="n">base_size</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">18</span><span class="p">)</span><span class="o">+</span><span class="w">
</span><span class="n">scale_x_continuous</span><span class="p">(</span><span class="n">breaks</span><span class="o">=</span><span class="nf">c</span><span class="p">(</span><span class="m">0</span><span class="o">:</span><span class="m">10</span><span class="p">))</span><span class="o">+</span><span class="w">
</span><span class="n">xlab</span><span class="p">(</span><span class="s2">"n"</span><span class="p">)</span><span class="o">+</span><span class="w">
</span><span class="n">ylab</span><span class="p">(</span><span class="s2">"h[n]"</span><span class="p">)</span><span class="w">
</span><span class="n">p</span><span class="w">
</span></code></pre></div></div> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/fibo-impulse-response-480.webp 480w,/assets/img/fibo-impulse-response-800.webp 800w,/assets/img/fibo-impulse-response-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/fibo-impulse-response.png" class="img-fluid rounded z-depth-1 imgcenter" width="auto" height="auto" data-zoomable="" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> <figcaption class="caption"> <b>Figure 1:</b> The impulse response (first 10 values) of our second-order IIR filter. </figcaption> </figure> <p>The impulse response corresponds precisely to the Fibonacci sequence.</p> <p>In Eq. \eqref{eq:z-transform}, we already computed the transfer function of our “Fibonacci”-filter. Let us see if we can obtain another representation of the impulse response in the time domain, which is no longer recursive and depicts a closed-form description of the Fibonacci numbers. Such a representation would be astonishing. We will do the following:</p> <ol> <li>Compute the partial fraction decomposition of our transfer function in Eq. \eqref{eq:z-transform}</li> <li>Look at the Z-transform of a certain type of infinite series</li> <li>Use the insights from 2. to transform our transfer function back into the time domain and remove the recursive structure of the impulse response</li> <li>Take the new impulse response to generate arbitrary Fibonacci numbers immediately</li> </ol> <h1 id="1-partial-fraction-decomposition-of-hz">1. Partial Fraction Decomposition of H(z)</h1> <p>Initially, we have to find the poles of our system</p> \[\begin{align} H(z)=\frac{Y(z)}{X(z)} = \frac{z^{-1}}{1- z^{-1} - z^{-2}}, \end{align}\] <p>hence, the roots in the denominator:</p> \[\begin{align} z^2-z-1=0. \end{align}\] <p>The 2 (non-complex) roots can be trivially found to be:</p> \[\begin{align} z_{1,2}=\frac{1}{2}(1\pm \sqrt 5). \end{align}\] <p>Now we can write our transfer function as:</p> \[\begin{align} H(z)=\frac{Y(z)}{X(z)} &amp;= \frac{z^{-1}}{1- z^{-1} - z^{-2}} \\ &amp;= \frac{z^{-1}}{\big(1-\frac{1}{2}(1 +\sqrt 5)z^{-1} \big) \big(1-\frac{1}{2}(1 -\sqrt 5)z^{-1}\big)} \\ &amp;= \frac{A}{1-\frac{1}{2}(1 +\sqrt 5)z^{-1}} + \frac{B}{1-\frac{1}{2}(1 -\sqrt 5)z^{-1}} \end{align}\] <p>To find the constants \(A\) and \(B\), we can multiply with the denominator of each term and evaluate the expression at the poles we found previously (done exemplarily here for the constant \(A\)):</p> \[\begin{align} z^{-1}\frac{1-\frac{1}{2}(1 +\sqrt 5)z^{-1}}{\big(1-\frac{1}{2}(1 +\sqrt 5)z^{-1} \big) \big(1-\frac{1}{2}(1 -\sqrt 5)z^{-1}\big)} = A + \frac{B \big(1-\frac{1}{2}(1 +\sqrt 5)z^{-1}\big)}{1-\frac{1}{2}(1 -\sqrt 5)z^{-1}} \\ \frac{z^{-1}}{\big(1-\frac{1}{2}(1 -\sqrt 5)z^{-1}\big)}\Bigg|_{z = \frac{1}{2}(1 +\sqrt 5)} = A + \frac{B \big(1-\frac{1}{2}(1 +\sqrt 5)z^{-1}\big)}{\frac{1}{2}(1 -\sqrt 5)z^{-1}}\bigg|_{z = 1-\frac{1}{2}(1 +\sqrt 5)} \\ \end{align}\] <p>Since the term with the constant \(B\) vanishes due to the vanishing numerator, this leads to</p> \[\begin{align} A &amp;= \frac{z^{-1}}{1-\frac{1}{2}(1 -\sqrt 5)z^{-1}}\Bigg|_{z = \frac{1}{2}(1 +\sqrt 5)} \\ &amp;= \frac{2(1 +\sqrt 5)^{-1}}{1- \frac{\frac{1}{2}(1 -\sqrt 5)}{\frac{1}{2}(1 +\sqrt 5)}} \\ &amp;= \frac{2(1 +\sqrt 5)^{-1}}{\frac{1 +\sqrt 5 - (1 -\sqrt 5)}{1 +\sqrt 5}} \\ &amp;= \frac{2(1 +\sqrt 5)^{-1}(1 +\sqrt 5)}{2\sqrt 5} \\ &amp;= \frac{1}{\sqrt 5}. \\ \end{align}\] <p>Similarly, we obtain the constant \(B\):</p> \[\begin{align} B = -A = -\frac{1}{\sqrt 5}. \end{align}\] <p>This let’s us finally write our previous transfer function as:</p> \[\begin{align} H(z)=\frac{Y(z)}{X(z)} &amp;= \frac{1}{1- z^{-1} - z^{-2}} \\ &amp;= \frac{1}{\sqrt 5}\frac{1}{1-\frac{1}{2}(1 +\sqrt 5)z^{-1}} - \frac{1}{\sqrt 5}\frac{1}{1-\frac{1}{2}(1 -\sqrt 5)z^{-1}} \label{eq:partialfrac} \end{align}\] <h1 id="2-determing-the-inverse-z-transform-of-a-special-transfer-function">2. Determing the inverse Z-Transform of a special Transfer Function</h1> <p>To transfer our transfer function in Eq. \eqref{eq:partialfrac} back into the time domain, we have to find a suitable inverse transformation for an expression of the type</p> \[\begin{align} X(z) = \frac{b}{1-az^{-1}}. \label{eq:ztransinfinite} \end{align}\] <p>This is not a trivial task. However, if we remember the geometric series, we might be able to continue. We notice that the infinite sum</p> \[b\sum_{n=0}^{\infty} q^k\] <p>converges to</p> \[\begin{align} b\sum_{n=0}^{\infty} q^k = \frac{b}{1-q}, \label{eq:geom} \end{align}\] <p>if \(|q|&lt;1\).</p> <p>If we look at Eq. \eqref{eq:ztransinfinite}, we can see that we have something which is very similar to Eq. \eqref{eq:geom}. By identifying</p> \[q = az^{-1}\] <p>we can write</p> \[\begin{align} X(z) &amp;= \frac{b}{1-az^{-1}} = b\sum_{n=0}^{\infty} (az^{-1})^n \\ &amp;= b\sum_{n=0}^{\infty} a^nz^{-n} \label{eq:sumZ} \\ &amp;= b(1 + az^{-1} + a^2 z^{-2} + \ldots) \end{align}\] <p>Note that this step assumes that \(|az^{-1}|&lt;1\) or \(|a|&lt;|z|\) .</p> <p>For this sum that we found, the inverse Z-transform can now be easily determined:</p> \[\begin{align} x[n] &amp;= \mathcal{Z}^{-1}\big\{X(z)\big\}\\ &amp;= b a^n u[n], \\ \end{align}\] <p>where \(u[n]\) is the unit-step function which turns on at \(n=0.\) This is necessary, since the sum in Eq. \eqref{eq:sumZ} starts with \(n=0\) and \(x[n]\) is not defined (or is zero) for negative indexes.</p> <p>We can summarize the findings of this section in basically one equation:</p> \[\begin{align} \mathcal{Z}\big\{b a^n u[n])\big\} &amp;= \frac{b}{1-az^{-1}}. \label{eq:finalrelation} \end{align}\] <h1 id="3-inverse-transform-of-the-previous-partial-fraction-decomposition">3. Inverse Transform of the previous Partial Fraction Decomposition</h1> <p>We are ready to transform Eq. \eqref{eq:partialfrac} back into the time domain by using the relation in Eq. \eqref{eq:finalrelation}. Let’s do it. Remember:</p> <p>\(\begin{align} H(z)=\frac{1}{\sqrt 5}\frac{1}{1-\frac{1}{2}(1 +\sqrt 5)z^{-1}} - \frac{1}{\sqrt 5}\frac{1}{1-\frac{1}{2}(1 -\sqrt 5)z^{-1}} \end{align}\)</p> <p>This leads us to: </p> \[\begin{align} h[n] &amp;= \mathcal{Z}^{-1}\big\{H(z)\big\} \\ &amp;= \frac{1}{\sqrt 5} \Big[\frac{1}{2}(1 +\sqrt 5)\Big]^{n}u[n] - \frac{1}{\sqrt 5} \Big[\frac{1}{2}(1 -\sqrt 5)\Big]^{n}u[n] \\ &amp;= \frac{1}{\sqrt 5} \Big[\frac{1}{2}(1 +\sqrt 5)\Big]^{n} - \frac{1}{\sqrt 5} \Big[\frac{1}{2}(1 -\sqrt 5)\Big]^{n}, \, \mbox{for} \, n \ge 0 \label{eq:backintime} \end{align}\] <p>which – when looked at closer – is a truly remarkable result. There is no longer a recursive formulation in the impulse response. This means we can directly compute any arbitrary Fibonacci number using this closed-form solution.</p> <p>Another interesting observation from the above equation is that the term \(\frac{1}{2}(1 +\sqrt 5)\) is the so called golden ratio \(\varphi.\) The golden ratio has many exciting properties that one should look at. In this case, we will use it to simplify our expression above.</p> <p>Using \(\varphi = \frac{1 +\sqrt 5}{2}\) and the additional relation</p> \[\begin{align} -\frac{1}{\varphi} &amp;= -\varphi^{-1} = -\frac{2}{1 +\sqrt 5} \\ &amp;= -\frac{2}{1 +\sqrt 5} \frac{1 -\sqrt 5}{1 -\sqrt 5} \\ &amp;= -2 \frac{1 -\sqrt 5}{(1 +\sqrt 5)(1 -\sqrt 5)} \\ &amp;= -2 \frac{1 -\sqrt 5}{1 - 5} \\ &amp;= -2 \frac{1 -\sqrt 5}{-4} \\ &amp;= \frac{1 -\sqrt 5}{2} , \end{align}\] <p>we can re-write Eq. \eqref{eq:backintime} in the following way:</p> \[\begin{align} h[n] &amp;= \frac{1}{\sqrt 5} \Big[\frac{1}{2}(1 +\sqrt 5)\Big]^{n} - \frac{1}{\sqrt 5} \Big[\frac{1}{2}(1 -\sqrt 5)\Big]^{n} \\ &amp;= \frac{1}{\sqrt 5} \varphi^{n} - \frac{1}{\sqrt 5} (-\varphi)^{-n} \\ &amp;= \frac{\varphi^{n} - (-\varphi)^{-n}}{\sqrt 5}\\ &amp;= \frac{\varphi^{n} - (-\varphi)^{-n}}{2\varphi -1}, \end{align}\] <p>which is – as I find – a really stunning formulation of the Fibonacci sequence. (There are also some issues with the above representation, but let’s forget about them at the moment.)</p> <h1 id="4-compute-arbitrary-fibonacci-numbers-using-the-closed-form-solution">4. Compute arbitrary Fibonacci Numbers using the Closed-Form Solution</h1> <p>A simple R-function implementing this closed form solution could look like this:</p> <div class="language-R highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">fibo</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="k">function</span><span class="p">(</span><span class="n">n</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
  </span><span class="n">phi</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="m">1</span><span class="o">+</span><span class="nf">sqrt</span><span class="p">(</span><span class="m">5</span><span class="p">))</span><span class="o">/</span><span class="m">2</span><span class="w">
  </span><span class="p">(</span><span class="n">phi</span><span class="o">^</span><span class="p">(</span><span class="n">n</span><span class="p">)</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="p">(</span><span class="o">-</span><span class="n">phi</span><span class="p">)</span><span class="o">^</span><span class="p">(</span><span class="o">-</span><span class="n">n</span><span class="p">))</span><span class="o">/</span><span class="p">(</span><span class="m">2</span><span class="o">*</span><span class="n">phi</span><span class="m">-1</span><span class="p">)</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div> <p>Try it out! For exampe, I get the following results in the following for the following cases:</p> <div class="language-R highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;</span><span class="w"> </span><span class="n">sapply</span><span class="p">(</span><span class="m">0</span><span class="o">:</span><span class="m">19</span><span class="p">,</span><span class="w"> </span><span class="n">fibo</span><span class="p">)</span><span class="w">
</span><span class="p">[</span><span class="m">1</span><span class="p">]</span><span class="w"> </span><span class="m">0</span><span class="w">  </span><span class="m">1</span><span class="w">  </span><span class="m">1</span><span class="w">  </span><span class="m">2</span><span class="w">  </span><span class="m">3</span><span class="w">  </span><span class="m">5</span><span class="w">  </span><span class="m">8</span><span class="w">  </span><span class="m">13</span><span class="w">  </span><span class="m">21</span><span class="w">  </span><span class="m">34</span><span class="w">  </span><span class="m">55</span><span class="w">  </span><span class="m">89</span><span class="w">  </span><span class="m">144</span><span class="w">  </span><span class="m">233</span><span class="w">  </span><span class="m">377</span><span class="w">  </span><span class="m">610</span><span class="w">  </span><span class="m">987</span><span class="w"> </span><span class="m">1597</span><span class="w"> </span><span class="m">2584</span><span class="w"> </span><span class="m">4181</span><span class="w">
</span></code></pre></div></div> <div class="language-R highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;</span><span class="w"> </span><span class="n">fibo</span><span class="p">(</span><span class="m">57</span><span class="p">)</span><span class="w">
</span><span class="p">[</span><span class="m">1</span><span class="p">]</span><span class="w"> </span><span class="m">365435296162</span><span class="w">
</span></code></pre></div></div>]]></content><author><name></name></author><category term="math"/><category term="fibonacci"/><category term="math"/><category term="signal"/><category term="processing"/><summary type="html"><![CDATA[The Fibonacci sequence might be one of the most famous sequences in the field of mathmatics and computer science. In this blog post we will derive an interesting closed-form solution to directly compute any arbitrary Fibonacci number without the necessity to obtain its predecessors first.]]></summary></entry><entry><title type="html">a post with code diff</title><link href="https://markusthill.github.io/blog/2024/code-diff/" rel="alternate" type="text/html" title="a post with code diff"/><published>2024-01-27T19:22:00+00:00</published><updated>2024-01-27T19:22:00+00:00</updated><id>https://markusthill.github.io/blog/2024/code-diff</id><content type="html" xml:base="https://markusthill.github.io/blog/2024/code-diff/"><![CDATA[<p>You can display diff code by using the regular markdown syntax:</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">diff
</span><span class="gh">diff --git a/sample.js b/sample.js
index 0000001..0ddf2ba
</span><span class="gd">--- a/sample.js
</span><span class="gi">+++ b/sample.js
</span><span class="p">@@ -1 +1 @@</span>
<span class="gd">-console.log("Hello World!")
</span><span class="gi">+console.log("Hello from Diff2Html!")</span>
<span class="p">```</span>
</code></pre></div></div> <p>Which generates:</p> <div class="language-diff highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gh">diff --git a/sample.js b/sample.js
index 0000001..0ddf2ba
</span><span class="gd">--- a/sample.js
</span><span class="gi">+++ b/sample.js
</span><span class="p">@@ -1 +1 @@</span>
<span class="gd">-console.log("Hello World!")
</span><span class="gi">+console.log("Hello from Diff2Html!")
</span></code></pre></div></div> <p>But this is difficult to read, specially if you have a large diff. You can use <a href="https://diff2html.xyz/">diff2html</a> to display a more readable version of the diff. For this, just use <code class="language-plaintext highlighter-rouge">diff2html</code> instead of <code class="language-plaintext highlighter-rouge">diff</code> for the code block language:</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">diff2html
</span><span class="sb">diff --git a/sample.js b/sample.js
index 0000001..0ddf2ba
--- a/sample.js
+++ b/sample.js
@@ -1 +1 @@
-console.log("Hello World!")
+console.log("Hello from Diff2Html!")</span>
<span class="p">```</span>
</code></pre></div></div> <p>If we use a longer example, for example <a href="https://github.com/rtfpessoa/diff2html/commit/c2c253d3e3f8b8b267f551e659f72b44ca2ac927">this commit from diff2html</a>, it will generate the following output:</p> <pre><code class="language-diff2html">From 2aaae31cc2a37bfff83430c2c914b140bee59b6a Mon Sep 17 00:00:00 2001
From: Rodrigo Fernandes &lt;rtfrodrigo@gmail.com&gt;
Date: Sun, 9 Oct 2016 16:41:54 +0100
Subject: [PATCH 1/2] Initial template override support

---
 scripts/hulk.js                    |  4 ++--
 src/diff2html.js                   |  3 +--
 src/file-list-printer.js           | 11 ++++++++---
 src/hoganjs-utils.js               | 29 +++++++++++++++++------------
 src/html-printer.js                |  6 ++++++
 src/line-by-line-printer.js        |  6 +++++-
 src/side-by-side-printer.js        |  6 +++++-
 test/file-list-printer-tests.js    |  2 +-
 test/hogan-cache-tests.js          | 18 +++++++++++++++---
 test/line-by-line-tests.js         |  3 +--
 test/side-by-side-printer-tests.js |  3 +--
 11 files changed, 62 insertions(+), 29 deletions(-)

diff --git a/scripts/hulk.js b/scripts/hulk.js
index 5a793c18..a4b1a4d5 100755
--- a/scripts/hulk.js
+++ b/scripts/hulk.js
@@ -173,11 +173,11 @@ function namespace(name) {
 // write a template foreach file that matches template extension
 templates = extractFiles(options.argv.remain)
   .map(function(file) {
-    var openedFile = fs.readFileSync(file, 'utf-8');
+    var openedFile = fs.readFileSync(file, 'utf-8').trim();
     var name;
     if (!openedFile) return;
     name = namespace(path.basename(file).replace(/\..*$/, ''));
-    openedFile = removeByteOrderMark(openedFile.trim());
+    openedFile = removeByteOrderMark(openedFile);
     openedFile = wrap(file, name, openedFile);
     if (!options.outputdir) return openedFile;
     fs.writeFileSync(path.join(options.outputdir, name + '.js')
diff --git a/src/diff2html.js b/src/diff2html.js
index 21b0119e..64e138f5 100644
--- a/src/diff2html.js
+++ b/src/diff2html.js
@@ -7,7 +7,6 @@

 (function() {
   var diffParser = require('./diff-parser.js').DiffParser;
-  var fileLister = require('./file-list-printer.js').FileListPrinter;
   var htmlPrinter = require('./html-printer.js').HtmlPrinter;

   function Diff2Html() {
@@ -43,7 +42,7 @@

     var fileList = '';
     if (configOrEmpty.showFiles === true) {
-      fileList = fileLister.generateFileList(diffJson, configOrEmpty);
+      fileList = htmlPrinter.generateFileListSummary(diffJson, configOrEmpty);
     }

     var diffOutput = '';
diff --git a/src/file-list-printer.js b/src/file-list-printer.js
index e408d9b2..1e0a2c61 100644
--- a/src/file-list-printer.js
+++ b/src/file-list-printer.js
@@ -8,11 +8,16 @@
 (function() {
   var printerUtils = require('./printer-utils.js').PrinterUtils;

-  var hoganUtils = require('./hoganjs-utils.js').HoganJsUtils;
+  var hoganUtils;
+
   var baseTemplatesPath = 'file-summary';
   var iconsBaseTemplatesPath = 'icon';

-  function FileListPrinter() {
+  function FileListPrinter(config) {
+    this.config = config;
+
+    var HoganJsUtils = require('./hoganjs-utils.js').HoganJsUtils;
+    hoganUtils = new HoganJsUtils(config);
   }

   FileListPrinter.prototype.generateFileList = function(diffFiles) {
@@ -38,5 +43,5 @@
     });
   };

-  module.exports.FileListPrinter = new FileListPrinter();
+  module.exports.FileListPrinter = FileListPrinter;
 })();
diff --git a/src/hoganjs-utils.js b/src/hoganjs-utils.js
index 9949e5fa..0dda08d7 100644
--- a/src/hoganjs-utils.js
+++ b/src/hoganjs-utils.js
@@ -8,18 +8,19 @@
 (function() {
   var fs = require('fs');
   var path = require('path');
-
   var hogan = require('hogan.js');

   var hoganTemplates = require('./templates/diff2html-templates.js');

-  var templatesPath = path.resolve(__dirname, 'templates');
+  var extraTemplates;

-  function HoganJsUtils() {
+  function HoganJsUtils(configuration) {
+    this.config = configuration || {};
+    extraTemplates = this.config.templates || {};
   }

-  HoganJsUtils.prototype.render = function(namespace, view, params, configuration) {
-    var template = this.template(namespace, view, configuration);
+  HoganJsUtils.prototype.render = function(namespace, view, params) {
+    var template = this.template(namespace, view);
     if (template) {
       return template.render(params);
     }
@@ -27,17 +28,16 @@
     return null;
   };

-  HoganJsUtils.prototype.template = function(namespace, view, configuration) {
-    var config = configuration || {};
+  HoganJsUtils.prototype.template = function(namespace, view) {
     var templateKey = this._templateKey(namespace, view);

-    return this._getTemplate(templateKey, config);
+    return this._getTemplate(templateKey);
   };

-  HoganJsUtils.prototype._getTemplate = function(templateKey, config) {
+  HoganJsUtils.prototype._getTemplate = function(templateKey) {
     var template;

-    if (!config.noCache) {
+    if (!this.config.noCache) {
       template = this._readFromCache(templateKey);
     }

@@ -53,6 +53,7 @@

     try {
       if (fs.readFileSync) {
+        var templatesPath = path.resolve(__dirname, 'templates');
         var templatePath = path.join(templatesPath, templateKey);
         var templateContent = fs.readFileSync(templatePath + '.mustache', 'utf8');
         template = hogan.compile(templateContent);
@@ -66,12 +67,16 @@
   };

   HoganJsUtils.prototype._readFromCache = function(templateKey) {
-    return hoganTemplates[templateKey];
+    return extraTemplates[templateKey] || hoganTemplates[templateKey];
   };

   HoganJsUtils.prototype._templateKey = function(namespace, view) {
     return namespace + '-' + view;
   };

-  module.exports.HoganJsUtils = new HoganJsUtils();
+  HoganJsUtils.prototype.compile = function(templateStr) {
+    return hogan.compile(templateStr);
+  };
+
+  module.exports.HoganJsUtils = HoganJsUtils;
 })();
diff --git a/src/html-printer.js b/src/html-printer.js
index 585d5b66..13f83047 100644
--- a/src/html-printer.js
+++ b/src/html-printer.js
@@ -8,6 +8,7 @@
 (function() {
   var LineByLinePrinter = require('./line-by-line-printer.js').LineByLinePrinter;
   var SideBySidePrinter = require('./side-by-side-printer.js').SideBySidePrinter;
+  var FileListPrinter = require('./file-list-printer.js').FileListPrinter;

   function HtmlPrinter() {
   }
@@ -22,5 +23,10 @@
     return sideBySidePrinter.generateSideBySideJsonHtml(diffFiles);
   };

+  HtmlPrinter.prototype.generateFileListSummary = function(diffJson, config) {
+    var fileListPrinter = new FileListPrinter(config);
+    return fileListPrinter.generateFileList(diffJson);
+  };
+
   module.exports.HtmlPrinter = new HtmlPrinter();
 })();
diff --git a/src/line-by-line-printer.js b/src/line-by-line-printer.js
index b07eb53c..d230bedd 100644
--- a/src/line-by-line-printer.js
+++ b/src/line-by-line-printer.js
@@ -11,7 +11,8 @@
   var utils = require('./utils.js').Utils;
   var Rematch = require('./rematch.js').Rematch;

-  var hoganUtils = require('./hoganjs-utils.js').HoganJsUtils;
+  var hoganUtils;
+
   var genericTemplatesPath = 'generic';
   var baseTemplatesPath = 'line-by-line';
   var iconsBaseTemplatesPath = 'icon';
@@ -19,6 +20,9 @@

   function LineByLinePrinter(config) {
     this.config = config;
+
+    var HoganJsUtils = require('./hoganjs-utils.js').HoganJsUtils;
+    hoganUtils = new HoganJsUtils(config);
   }

   LineByLinePrinter.prototype.makeFileDiffHtml = function(file, diffs) {
diff --git a/src/side-by-side-printer.js b/src/side-by-side-printer.js
index bbf1dc8d..5e3033b3 100644
--- a/src/side-by-side-printer.js
+++ b/src/side-by-side-printer.js
@@ -11,7 +11,8 @@
   var utils = require('./utils.js').Utils;
   var Rematch = require('./rematch.js').Rematch;

-  var hoganUtils = require('./hoganjs-utils.js').HoganJsUtils;
+  var hoganUtils;
+
   var genericTemplatesPath = 'generic';
   var baseTemplatesPath = 'side-by-side';
   var iconsBaseTemplatesPath = 'icon';
@@ -26,6 +27,9 @@

   function SideBySidePrinter(config) {
     this.config = config;
+
+    var HoganJsUtils = require('./hoganjs-utils.js').HoganJsUtils;
+    hoganUtils = new HoganJsUtils(config);
   }

   SideBySidePrinter.prototype.makeDiffHtml = function(file, diffs) {
diff --git a/test/file-list-printer-tests.js b/test/file-list-printer-tests.js
index a502a46f..60ea3208 100644
--- a/test/file-list-printer-tests.js
+++ b/test/file-list-printer-tests.js
@@ -1,6 +1,6 @@
 var assert = require('assert');

-var fileListPrinter = require('../src/file-list-printer.js').FileListPrinter;
+var fileListPrinter = new (require('../src/file-list-printer.js').FileListPrinter)();

 describe('FileListPrinter', function() {
   describe('generateFileList', function() {
diff --git a/test/hogan-cache-tests.js b/test/hogan-cache-tests.js
index 190bf6f8..3bb754ac 100644
--- a/test/hogan-cache-tests.js
+++ b/test/hogan-cache-tests.js
@@ -1,6 +1,6 @@
 var assert = require('assert');

-var HoganJsUtils = require('../src/hoganjs-utils.js').HoganJsUtils;
+var HoganJsUtils = new (require('../src/hoganjs-utils.js').HoganJsUtils)();
 var diffParser = require('../src/diff-parser.js').DiffParser;

 describe('HoganJsUtils', function() {
@@ -21,16 +21,28 @@ describe('HoganJsUtils', function() {
       });
       assert.equal(emptyDiffHtml, result);
     });
+
     it('should render view without cache', function() {
       var result = HoganJsUtils.render('generic', 'empty-diff', {
         contentClass: 'd2h-code-line',
         diffParser: diffParser
       }, {noCache: true});
-      assert.equal(emptyDiffHtml + '\n', result);
+      assert.equal(emptyDiffHtml, result);
     });
+
     it('should return null if template is missing', function() {
-      var result = HoganJsUtils.render('generic', 'missing-template', {}, {noCache: true});
+      var hoganUtils = new (require('../src/hoganjs-utils.js').HoganJsUtils)({noCache: true});
+      var result = hoganUtils.render('generic', 'missing-template', {});
       assert.equal(null, result);
     });
+
+    it('should allow templates to be overridden', function() {
+      var emptyDiffTemplate = HoganJsUtils.compile('&lt;p&gt;&lt;/p&gt;');
+
+      var config = {templates: {'generic-empty-diff': emptyDiffTemplate}};
+      var hoganUtils = new (require('../src/hoganjs-utils.js').HoganJsUtils)(config);
+      var result = hoganUtils.render('generic', 'empty-diff', {myName: 'Rodrigo Fernandes'});
+      assert.equal('&lt;p&gt;Rodrigo Fernandes&lt;/p&gt;', result);
+    });
   });
 });
diff --git a/test/line-by-line-tests.js b/test/line-by-line-tests.js
index 1cd92073..8869b3df 100644
--- a/test/line-by-line-tests.js
+++ b/test/line-by-line-tests.js
@@ -14,7 +14,7 @@ describe('LineByLinePrinter', function() {
         '            File without changes\n' +
         '        &lt;/div&gt;\n' +
         '    &lt;/td&gt;\n' +
-        '&lt;/tr&gt;\n';
+        '&lt;/tr&gt;';

       assert.equal(expected, fileHtml);
     });
@@ -422,7 +422,6 @@ describe('LineByLinePrinter', function() {
         '        &lt;/div&gt;\n' +
         '    &lt;/td&gt;\n' +
         '&lt;/tr&gt;\n' +
-        '\n' +
         '                &lt;/tbody&gt;\n' +
         '            &lt;/table&gt;\n' +
         '        &lt;/div&gt;\n' +
diff --git a/test/side-by-side-printer-tests.js b/test/side-by-side-printer-tests.js
index 76625f8e..771daaa5 100644
--- a/test/side-by-side-printer-tests.js
+++ b/test/side-by-side-printer-tests.js
@@ -14,7 +14,7 @@ describe('SideBySidePrinter', function() {
         '            File without changes\n' +
         '        &lt;/div&gt;\n' +
         '    &lt;/td&gt;\n' +
-        '&lt;/tr&gt;\n';
+        '&lt;/tr&gt;';

       assert.equal(expectedRight, fileHtml.right);
       assert.equal(expectedLeft, fileHtml.left);
@@ -324,7 +324,6 @@ describe('SideBySidePrinter', function() {
         '        &lt;/div&gt;\n' +
         '    &lt;/td&gt;\n' +
         '&lt;/tr&gt;\n' +
-        '\n' +
         '                    &lt;/tbody&gt;\n' +
         '                &lt;/table&gt;\n' +
         '            &lt;/div&gt;\n' +

From f3cadb96677d0eb82fc2752dc3ffbf35ca9b5bdb Mon Sep 17 00:00:00 2001
From: Rodrigo Fernandes &lt;rtfrodrigo@gmail.com&gt;
Date: Sat, 15 Oct 2016 13:21:22 +0100
Subject: [PATCH 2/2] Allow uncompiled templates

---
 README.md                 |  3 +++
 src/hoganjs-utils.js      |  7 +++++++
 test/hogan-cache-tests.js | 24 +++++++++++++++++++++++-
 3 files changed, 33 insertions(+), 1 deletion(-)

diff --git a/README.md b/README.md
index 132c8a28..46909f25 100644
--- a/README.md
+++ b/README.md
@@ -98,6 +98,9 @@ The HTML output accepts a Javascript object with configuration. Possible options
   - `synchronisedScroll`: scroll both panes in side-by-side mode: `true` or `false`, default is `false`
   - `matchWordsThreshold`: similarity threshold for word matching, default is 0.25
   - `matchingMaxComparisons`: perform at most this much comparisons for line matching a block of changes, default is `2500`
+  - `templates`: object with previously compiled templates to replace parts of the html
+  - `rawTemplates`: object with raw not compiled templates to replace parts of the html
+  &gt; For more information regarding the possible templates look into [src/templates](https://github.com/rtfpessoa/diff2html/tree/master/src/templates)

 ## Diff2HtmlUI Helper

diff --git a/src/hoganjs-utils.js b/src/hoganjs-utils.js
index 0dda08d7..b2e9c275 100644
--- a/src/hoganjs-utils.js
+++ b/src/hoganjs-utils.js
@@ -17,6 +17,13 @@
   function HoganJsUtils(configuration) {
     this.config = configuration || {};
     extraTemplates = this.config.templates || {};
+
+    var rawTemplates = this.config.rawTemplates || {};
+    for (var templateName in rawTemplates) {
+      if (rawTemplates.hasOwnProperty(templateName)) {
+        if (!extraTemplates[templateName]) extraTemplates[templateName] = this.compile(rawTemplates[templateName]);
+      }
+    }
   }

   HoganJsUtils.prototype.render = function(namespace, view, params) {
diff --git a/test/hogan-cache-tests.js b/test/hogan-cache-tests.js
index 3bb754ac..a34839c0 100644
--- a/test/hogan-cache-tests.js
+++ b/test/hogan-cache-tests.js
@@ -36,7 +36,7 @@ describe('HoganJsUtils', function() {
       assert.equal(null, result);
     });

-    it('should allow templates to be overridden', function() {
+    it('should allow templates to be overridden with compiled templates', function() {
       var emptyDiffTemplate = HoganJsUtils.compile('&lt;p&gt;&lt;/p&gt;');

       var config = {templates: {'generic-empty-diff': emptyDiffTemplate}};
@@ -44,5 +44,27 @@ describe('HoganJsUtils', function() {
       var result = hoganUtils.render('generic', 'empty-diff', {myName: 'Rodrigo Fernandes'});
       assert.equal('&lt;p&gt;Rodrigo Fernandes&lt;/p&gt;', result);
     });
+
+    it('should allow templates to be overridden with uncompiled templates', function() {
+      var emptyDiffTemplate = '&lt;p&gt;&lt;/p&gt;';
+
+      var config = {rawTemplates: {'generic-empty-diff': emptyDiffTemplate}};
+      var hoganUtils = new (require('../src/hoganjs-utils.js').HoganJsUtils)(config);
+      var result = hoganUtils.render('generic', 'empty-diff', {myName: 'Rodrigo Fernandes'});
+      assert.equal('&lt;p&gt;Rodrigo Fernandes&lt;/p&gt;', result);
+    });
+
+    it('should allow templates to be overridden giving priority to compiled templates', function() {
+      var emptyDiffTemplate = HoganJsUtils.compile('&lt;p&gt;&lt;/p&gt;');
+      var emptyDiffTemplateUncompiled = '&lt;p&gt;Not used!&lt;/p&gt;';
+
+      var config = {
+        templates: {'generic-empty-diff': emptyDiffTemplate},
+        rawTemplates: {'generic-empty-diff': emptyDiffTemplateUncompiled}
+      };
+      var hoganUtils = new (require('../src/hoganjs-utils.js').HoganJsUtils)(config);
+      var result = hoganUtils.render('generic', 'empty-diff', {myName: 'Rodrigo Fernandes'});
+      assert.equal('&lt;p&gt;Rodrigo Fernandes&lt;/p&gt;', result);
+    });
   });
 });
</code></pre>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="code"/><summary type="html"><![CDATA[this is how you can display code diffs]]></summary></entry><entry><title type="html">a post with advanced image components</title><link href="https://markusthill.github.io/blog/2024/advanced-images/" rel="alternate" type="text/html" title="a post with advanced image components"/><published>2024-01-27T11:46:00+00:00</published><updated>2024-01-27T11:46:00+00:00</updated><id>https://markusthill.github.io/blog/2024/advanced-images</id><content type="html" xml:base="https://markusthill.github.io/blog/2024/advanced-images/"><![CDATA[<p>This is an example post with advanced image components.</p> <h2 id="image-slider">Image Slider</h2> <p>This is a simple image slider. It uses the <a href="https://swiperjs.com/">Swiper</a> library. Check the <a href="https://swiperjs.com/demos">examples page</a> for more information of what you can achieve with it.</p> <swiper-container keyboard="true" navigation="true" pagination="true" pagination-clickable="true" pagination-dynamic-bullets="true" rewind="true"> <swiper-slide> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/9-480.webp 480w,/assets/img/9-800.webp 800w,/assets/img/9-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/9.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </swiper-slide> <swiper-slide> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/7-480.webp 480w,/assets/img/7-800.webp 800w,/assets/img/7-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/7.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </swiper-slide> <swiper-slide> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/8-480.webp 480w,/assets/img/8-800.webp 800w,/assets/img/8-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/8.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </swiper-slide> <swiper-slide> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/10-480.webp 480w,/assets/img/10-800.webp 800w,/assets/img/10-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/10.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </swiper-slide> <swiper-slide> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/12-480.webp 480w,/assets/img/12-800.webp 800w,/assets/img/12-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/12.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </swiper-slide> </swiper-container> <h2 id="image-comparison-slider">Image Comparison Slider</h2> <p>This is a simple image comparison slider. It uses the <a href="https://img-comparison-slider.sneas.io/">img-comparison-slider</a> library. Check the <a href="https://img-comparison-slider.sneas.io/examples.html">examples page</a> for more information of what you can achieve with it.</p> <img-comparison-slider> <figure slot="first"> <picture> <source class="responsive-img-srcset" srcset="/assets/img/prof_pic-480.webp 480w,/assets/img/prof_pic-800.webp 800w,/assets/img/prof_pic-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/prof_pic.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <figure slot="second"> <picture> <source class="responsive-img-srcset" srcset="/assets/img/prof_pic_color-480.webp 480w,/assets/img/prof_pic_color-800.webp 800w,/assets/img/prof_pic_color-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/prof_pic_color.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </img-comparison-slider>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="images"/><summary type="html"><![CDATA[this is what advanced image components could look like]]></summary></entry><entry><title type="html">a post with vega lite</title><link href="https://markusthill.github.io/blog/2024/vega-lite/" rel="alternate" type="text/html" title="a post with vega lite"/><published>2024-01-27T00:20:00+00:00</published><updated>2024-01-27T00:20:00+00:00</updated><id>https://markusthill.github.io/blog/2024/vega-lite</id><content type="html" xml:base="https://markusthill.github.io/blog/2024/vega-lite/"><![CDATA[<p>This is an example post with some <a href="https://vega.github.io/vega-lite/">vega lite</a> code.</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">vega_lite
</span><span class="sb">{
  "$schema": "https://vega.github.io/schema/vega-lite/v5.json",
  "description": "A dot plot showing each movie in the database, and the difference from the average movie rating. The display is sorted by year to visualize everything in sequential order. The graph is for all Movies before 2019.",
  "data": {
    "url": "https://raw.githubusercontent.com/vega/vega/main/docs/data/movies.json"
  },
  "transform": [
    {"filter": "datum['IMDB Rating'] != null"},
    {"filter": {"timeUnit": "year", "field": "Release Date", "range": [null, 2019]}},
    {
      "joinaggregate": [{
        "op": "mean",
        "field": "IMDB Rating",
        "as": "AverageRating"
      }]
    },
    {
      "calculate": "datum['IMDB Rating'] - datum.AverageRating",
      "as": "RatingDelta"
    }
  ],
  "mark": "point",
  "encoding": {
    "x": {
      "field": "Release Date",
      "type": "temporal"
    },
    "y": {
      "field": "RatingDelta",
      "type": "quantitative",
      "title": "Rating Delta"
    },
    "color": {
      "field": "RatingDelta",
      "type": "quantitative",
      "scale": {"domainMid": 0},
      "title": "Rating Delta"
    }
  }
}</span>
<span class="p">```</span>
</code></pre></div></div> <p>Which generates:</p> <pre><code class="language-vega_lite">{
  "$schema": "https://vega.github.io/schema/vega-lite/v5.json",
  "description": "A dot plot showing each movie in the database, and the difference from the average movie rating. The display is sorted by year to visualize everything in sequential order. The graph is for all Movies before 2019.",
  "data": {
    "url": "https://raw.githubusercontent.com/vega/vega/main/docs/data/movies.json"
  },
  "transform": [
    {"filter": "datum['IMDB Rating'] != null"},
    {"filter": {"timeUnit": "year", "field": "Release Date", "range": [null, 2019]}},
    {
      "joinaggregate": [{
        "op": "mean",
        "field": "IMDB Rating",
        "as": "AverageRating"
      }]
    },
    {
      "calculate": "datum['IMDB Rating'] - datum.AverageRating",
      "as": "RatingDelta"
    }
  ],
  "mark": "point",
  "encoding": {
    "x": {
      "field": "Release Date",
      "type": "temporal"
    },
    "y": {
      "field": "RatingDelta",
      "type": "quantitative",
      "title": "Rating Delta"
    },
    "color": {
      "field": "RatingDelta",
      "type": "quantitative",
      "scale": {"domainMid": 0},
      "title": "Rating Delta"
    }
  }
}
</code></pre> <p>This plot supports both light and dark themes.</p>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="charts"/><summary type="html"><![CDATA[this is what included vega lite code could look like]]></summary></entry></feed>